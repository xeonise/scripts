"use strict";
(self.webpackChunk_N_E = self.webpackChunk_N_E || []).push([
    [1083], {
        11083: (e, t, r) => {
            r.r(t), r.d(t, {
                TVChartContainer: () => tK
            });
            var i, a, n, o, s, l, c, d, u, h, p, g, m, f, y, C, b, S, T, v, w, P, _, x, L, A, k, I, j, R, N, D, O, E, F, M, V, B, W, U, z, G, H, Y, q, J, Z, K, Q, $, X, ee, et, er, ei, ea, en, eo, es, el, ec, ed, eu, eh, ep, eg, em, ef, ey, eC, eb, eS, eT, ev, ew, eP, e_, ex, eL, eA, ek = r(22152),
                eI = r(85060),
                ej = r(72129),
                eR = r(8907);

            function eN(e, t) {
                let r = {
                    ...e
                };
                for (let i in t) "object" != typeof e[i] || null === e[i] || Array.isArray(e[i]) ? void 0 !== t[i] && (r[i] = t[i]) : r[i] = eN(e[i], t[i]);
                return r
            }! function(e) {
                e.UnknownAction = "UnknownAction", e.Spinner = "Spinner", e.Loading = "Loading", e.AlertAdd = "Alert.Add", e.AlertEdit = "Alert.Edit", e.AlertsClone = "Alerts.Clone", e.AlertsRemove = "Alerts.Remove", e.AlertsRemoveAll = "Alerts.RemoveAll", e.AlertsRemoveFiltered = "Alerts.RemoveFiltered", e.AlertsRemoveAllInactive = "Alerts.RemoveAllInactive", e.AlertsRemoveFires = "Alerts.RemoveFires", e.AlertsRestart = "Alerts.Restart", e.AlertsRestartAllInactive = "Alerts.RestartAllInactive", e.AlertsRestartFilteredInactive = "Alerts.RestartFilteredInactive", e.AlertsStop = "Alerts.Stop", e.AlertsStopAll = "Alerts.StopAll", e.AlertsStopFilteredActive = "Alerts.StopFilteredActive", e.AlertsExportFiresToCSV = "Alerts.ExportFiresToCSV", e.AlertsLogClear = "AlertsLog.Clear", e.ChartAddIndicatorToAllCharts = "Chart.AddIndicatorToAllCharts", e.ChartAddSymbolToWatchList = "Chart.AddSymbolToWatchList", e.ChartAlertLabelToggleExtendLines = "Chart.AlertLabel.ToggleExtendLines", e.ChartApplyIndicatorsToAllCharts = "Chart.ApplyIndicatorsToAllCharts", e.ChartIndicatorApplyChildIndicator = "Chart.Indicator.ApplyChildIndicator", e.ChartIndicatorApplyFinancials = "Chart.Indicator.ApplyFinancials", e.ChartIndicatorAbout = "Chart.Indicator.About", e.ChartIndicatorPineLogs = "Chart.Indicator.PineLogs", e.ChartIndicatorPineSource = "Chart.Indicator.PineSource", e.ChartIndicatorAddFavorites = "Chart.Indicator.AddFavorites", e.ChartChangeTimeZone = "Chart.ChangeTimeZone", e.ChartClipboardCopyPrice = "Chart.Clipboard.CopyPrice", e.ChartClipboardCopyLineTools = "Chart.Clipboard.CopyLineTools", e.ChartClipboardCopySource = "Chart.Clipboard.CopySource", e.ChartClipboardPasteSource = "Chart.Clipboard.PasteSource", e.ChartCrosshairLockVerticalCursor = "Chart.Crosshair.LockVerticalCursor", e.ChartCrosshairPlusButtonDrawHorizontalLine = "Chart.Crosshair.PlusButton.DrawHorizontalLine", e.ChartCustomActionId = "Chart.CustomActionId", e.ChartDialogsShowChangeInterval = "Chart.Dialogs.ShowChangeInterval", e.ChartDialogsShowChangeSymbol = "Chart.Dialogs.ShowChangeSymbol", e.ChartDialogsShowCompareOrAddSymbol = "Chart.Dialogs.ShowCompareOrAddSymbol", e.ChartDialogsShowGeneralSettings = "Chart.Dialogs.ShowGeneralSettings", e.ChartDialogsShowGeneralSettingsLegendTab = "Chart.Dialogs.ShowGeneralSettings.LegendTab", e.ChartDialogsShowGeneralSettingsSymbolTab = "Chart.Dialogs.ShowGeneralSettings.SymbolTab", e.ChartDialogsShowGeneralScalesTab = "Chart.Dialogs.ShowGeneralSettings.ScalesTab", e.ChartDialogsShowGeneralSettingsEventsAndAlertsTab = "Chart.Dialogs.ShowGeneralSettings.EventsAndAlertsTab", e.ChartDialogsShowGoToDate = "Chart.Dialogs.ShowGoToDate", e.ChartDialogsShowInsertIndicators = "Chart.Dialogs.ShowInsertIndicators", e.ChartDialogsShowInsertFinancials = "Chart.Dialogs.ShowInsertFinancials", e.ChartDialogsShowSymbolInfo = "Chart.Dialogs.ShowSymbolInfo", e.ChartDrawingToolbarToggleVisibility = "Chart.DrawingToolbar.ToggleVisibility", e.ChartExternalActionId = "Chart.ExternalActionId", e.ChartFavoriteDrawingToolsToolbarHide = "Chart.FavoriteDrawingToolsToolbar.Hide", e.ChartIndicatorShowSettingsDialog = "Chart.Indicator.ShowSettingsDialog", e.ChartLegendToggleLastDayChangeValuesVisibility = "Chart.Legend.ToggleLastDayChangeValuesVisibility", e.ChartLinkingGroupSync = "Chart.LinkingGroupSync", e.ChartLinkingGroupSyncChangeGroup = "Chart.LinkingGroupSync.ChangeGroup", e.ChartLegendToggleBarChangeValuesVisibility = "Chart.Legend.ToggleBarChangeValuesVisibility", e.ChartLegendTogglePriceSourceVisibility = "Chart.Legend.TogglePriceSourceVisibility", e.ChartLegendToggleIndicatorArgumentsVisibility = "Chart.Legend.ToggleIndicatorArgumentsVisibility", e.ChartLegendToggleIndicatorTitlesVisibility = "Chart.Legend.ToggleIndicatorTitlesVisibility", e.ChartLegendToggleIndicatorValuesVisibility = "Chart.Legend.ToggleIndicatorValuesVisibility", e.ChartLegendToggleOhlcValuesVisibility = "Chart.Legend.ToggleOhlcValuesVisibility", e.ChartLegendToggleOpenMarketStatusVisibility = "Chart.Legend.ToggleOpenMarketStatusVisibility", e.ChartLegendToggleSymbolVisibility = "Chart.Legend.ToggleSymbolVisibility", e.ChartLegendToggleVolumeVisibility = "Chart.Legend.ToggleVolumeVisibility", e.ChartLines = "Chart.Lines", e.ChartLinesToggleBidAskLinesVisibility = "Chart.Lines.ToggleBidAskLinesVisibility", e.ChartLinesToggleHighLowLinesVisibility = "Chart.Lines.ToggleHighLowLinesVisibility", e.ChartLinesToggleAverageLineVisibility = "Chart.Lines.ToggleAverageLineVisibility", e.ChartLinesTogglePrePostMarketLineVisibility = "Chart.Lines.TogglePrePostMarketLineVisibility", e.ChartLinesTogglePrePostMarketPriceLineVisibility = "Chart.Lines.TogglePrePostMarketPriceLineVisibility", e.ChartLinesToggleSeriesPrevCloseLineVisibility = "Chart.Lines.ToggleSeriesPrevCloseLineVisibility", e.ChartLinesToggleSeriesPriceLineVisibility = "Chart.Lines.ToggleSeriesPriceLineVisibility", e.ChartLineToolBarsPatternToggleFlipped = "Chart.LineTool.BarsPattern.ToggleFlipped", e.ChartLineToolBarsPatternToggleMirrored = "Chart.LineTool.BarsPattern.ToggleMirrored", e.ChartLineToolClone = "Chart.LineTool.Clone", e.ChartLineToolCreateLimitOrderFromState = "Chart.LineTool.CreateLimitOrderFromState", e.ChartLineToolElliotChangeDegreeProperty = "Chart.LineTool.Elliot.ChangeDegreeProperty", e.ChartLineToolNoSync = "Chart.LineTool.NoSync", e.ChartLineToolPitchforkChangeTypeToInside = "Chart.LineTool.Pitchfork.ChangeTypeToInside", e.ChartLineToolPitchforkChangeTypeToModifiedSchiff = "Chart.LineTool.Pitchfork.ChangeTypeToModifiedSchiff", e.ChartLineToolPitchforkChangeTypeToOriginal = "Chart.LineTool.Pitchfork.ChangeTypeToOriginal", e.ChartLineToolPitchforkChangeTypeToSchiff = "Chart.LineTool.Pitchfork.ChangeTypeToSchiff", e.ChartLineToolSyncInLayout = "Chart.LineTool.SyncInLayout", e.ChartLineToolSyncGlobally = "Chart.LineTool.SyncGlobally", e.ChartLineToolTemplates = "Chart.LineTool.Templates", e.ChartLineToolTemplatesApply = "Chart.LineTool.Templates.Apply", e.ChartLineToolTemplatesApplyDefaults = "Chart.LineTool.Templates.ApplyDefaults", e.ChartLineToolTemplatesSaveAs = "Chart.LineTool.Templates.SaveAs", e.ChartLineToolToolbarChangeFontSizeProperty = "Chart.LineTool.Toolbar.ChangeFontSizeProperty", e.ChartLineToolToolbarChangeLineStyleToDashed = "Chart.LineTool.Toolbar.ChangeLineStyleToDashed", e.ChartLineToolToolbarChangeLineStyleToDotted = "Chart.LineTool.Toolbar.ChangeLineStyleToDotted", e.ChartLineToolToolbarChangeLineStyleToSolid = "Chart.LineTool.Toolbar.ChangeLineStyleToSolid", e.ChartMarksToggleVisibility = "Chart.Marks.ToggleVisibility", e.ChartMoveChartInLayout = "Chart.MoveChartInLayout", e.ChartMoveChartInLayoutBack = "Chart.MoveChartInLayout.Back", e.ChartMoveChartInLayoutForward = "Chart.MoveChartInLayout.Forward", e.ChartTpoResetAllMergesAndSplits = "Chart.TPO.ResetAllMergesAndSplits", e.ChartTpoSplitBlock = "Chart.TPO.SplitBlock", e.ChartTpoMergeBlock = "Chart.TPO.MergeBlock", e.ChartObjectTreeShow = "Chart.ObjectTree.Show", e.ChartDataWindowShow = "Chart.DataWindow.Show", e.ChartPaneControlsDeletePane = "Chart.PaneControls.DeletePane", e.ChartPaneControlsMaximizePane = "Chart.PaneControls.MaximizePane", e.ChartPaneControlsMinimizePane = "Chart.PaneControls.MinimizePane", e.ChartPaneControlsMovePaneDown = "Chart.PaneControls.MovePaneDown", e.ChartPaneControlsMovePaneUp = "Chart.PaneControls.MovePaneUp", e.ChartPaneControlsCollapsePane = "Chart.PaneControls.CollapsePane", e.ChartPaneControlsRestorePane = "Chart.PaneControls.RestorePane", e.ChartPriceScaleLabels = "Chart.PriceScale.Labels", e.ChartPriceScaleLabelsToggleBidAskLabelsVisibility = "Chart.PriceScale.Labels.ToggleBidAskLabelsVisibility", e.ChartPriceScaleLabelsToggleHighLowPriceLabelsVisibility = "Chart.PriceScale.Labels.ToggleHighLowPriceLabelsVisibility", e.ChartPriceScaleLabelsToggleAveragePriceLabelVisibility = "Chart.PriceScale.Labels.ToggleAveragePriceLabelVisibility", e.ChartPriceScaleLabelsToggleIndicatorsNameLabelsVisibility = "Chart.PriceScale.Labels.ToggleIndicatorsNameLabelsVisibility", e.ChartPriceScaleLabelsToggleIndicatorsValueLabelsVisibility = "Chart.PriceScale.Labels.ToggleIndicatorsValueLabelsVisibility", e.ChartPriceScaleLabelsTogglePrePostMarketLabelsVisibility = "Chart.PriceScale.Labels.TogglePrePostMarketLabelsVisibility", e.ChartPriceScaleLabelsToggleNoOverlappingLabelsVisibility = "Chart.PriceScale.Labels.ToggleNoOverlappingLabelsVisibility", e.ChartPriceScaleLabelsToggleSeriesLastValueVisibility = "Chart.PriceScale.Labels.ToggleSeriesLastValueVisibility", e.ChartPriceScaleLabelsToggleSymbolNameLabelsVisibility = "Chart.PriceScale.Labels.ToggleSymbolNameLabelsVisibility", e.ChartPriceScaleLabelsToggleSymbolPrevCloseValueVisibility = "Chart.PriceScale.Labels.ToggleSymbolPrevCloseValueVisibility", e.ChartPriceScaleMergeAllScales = "Chart.PriceScale.MergeAllScales", e.ChartPriceScaleMergeAllScalesToLeft = "Chart.PriceScale.MergeAllScalesToLeft", e.ChartPriceScaleMergeAllScalesToRight = "Chart.PriceScale.MergeAllScalesToRight", e.ChartPriceScaleMoveToLeft = "Chart.PriceScale.MoveToLeft", e.ChartPriceScaleMoveToRight = "Chart.PriceScale.MoveToRight", e.ChartPriceScaleReset = "Chart.PriceScale.Reset", e.ChartPriceScaleToggleAddOrderPlusButtonVisibility = "Chart.PriceScale.ToggleAddOrderPlusButtonVisibility", e.ChartPriceScaleToggleAutoScale = "Chart.PriceScale.ToggleAutoScale", e.ChartPriceScaleToggleAutoScaleSeriesOnly = "Chart.PriceScale.ToggleAutoScaleSeriesOnly", e.ChartPriceScaleToggleCountdownToBarCloseVisibility = "Chart.PriceScale.ToggleCountdownToBarCloseVisibility", e.ChartPriceScaleToggleIndexedTo100 = "Chart.PriceScale.ToggleIndexedTo100", e.ChartPriceScaleToggleInvertScale = "Chart.PriceScale.ToggleInvertScale", e.ChartPriceScaleToggleLogarithmic = "Chart.PriceScale.ToggleLogarithmic", e.ChartPriceScaleTogglePercentage = "Chart.PriceScale.TogglePercentage", e.ChartPriceScaleToggleRegular = "Chart.PriceScale.ToggleRegular", e.ChartRedo = "Chart.Redo", e.ChartRemoveAllIndicators = "Chart.RemoveAllIndicators", e.ChartRemoveAllIndicatorsAndLineTools = "Chart.RemoveAllIndicatorsAndLineTools", e.ChartRemoveAllLineTools = "Chart.RemoveAllLineTools", e.ChartScalesReset = "Chart.Scales.Reset", e.ChartScalesToggleLockPriceToBarRatio = "Chart.Scales.ToggleLockPriceToBarRatio", e.ChartScrollToLineTool = "Chart.ScrollToLineTool", e.ChartSelectedObjectHide = "Chart.SelectedObject.Hide", e.ChartSelectedObjectRemove = "Chart.SelectedObject.Remove", e.ChartSelectedObjectShow = "Chart.SelectedObject.Show", e.ChartSelectedObjectShowSettingsDialog = "Chart.SelectedObject.ShowSettingsDialog", e.ChartSelectedObjectToggleLocked = "Chart.SelectedObject.ToggleLocked", e.ChartSeriesPriceScaleToggleAutoScale = "Chart.Series.PriceScale.ToggleAutoScale", e.ChartSeriesPriceScaleToggleIndexedTo100 = "Chart.Series.PriceScale.ToggleIndexedTo100", e.ChartSeriesPriceScaleToggleInvertPriceScale = "Chart.Series.PriceScale.ToggleInvertPriceScale", e.ChartSeriesPriceScaleToggleLogarithmic = "Chart.Series.PriceScale.ToggleLogarithmic", e.ChartSeriesPriceScaleTogglePercentage = "Chart.Series.PriceScale.TogglePercentage", e.ChartSeriesPriceScaleToggleRegular = "Chart.Series.PriceScale.ToggleRegular", e.ChartSessionBreaksToggleVisibility = "Chart.SessionBreaks.ToggleVisibility", e.ChartSetSession = "Chart.SetSession", e.ChartSourceChangePriceScale = "Chart.Source.ChangePriceScale", e.ChartSourceMergeDown = "Chart.Source.MergeDown", e.ChartSourceMergeUp = "Chart.Source.MergeUp", e.ChartSourceMoveToNoScale = "Chart.Source.MoveToNoScale", e.ChartSourceMoveToOtherScale = "Chart.Source.MoveToOtherScale", e.ChartSourceMoveToPane = "Chart.Source.MoveToPane", e.ChartSourceUnmergeDown = "Chart.Source.UnmergeDown", e.ChartSourceUnmergeUp = "Chart.Source.UnmergeUp", e.ChartSourceVisualOrder = "Chart.Source.VisualOrder", e.ChartSourceVisualOrderBringForward = "Chart.Source.VisualOrder.BringForward", e.ChartSourceVisualOrderBringToFront = "Chart.Source.VisualOrder.BringToFront", e.ChartSourceVisualOrderSendBackward = "Chart.Source.VisualOrder.SendBackward", e.ChartSourceVisualOrderSendToBack = "Chart.Source.VisualOrder.SendToBack", e.ChartSourceResetInputPoints = "Chart.Source.ResetInputPoints", e.ChartThemeApply = "Chart.Theme.Apply", e.ChartThemeApplyCustom = "Chart.Theme.Apply.Custom", e.ChartThemeSaveAs = "Chart.Theme.SaveAs", e.ChartTimeScaleReset = "Chart.TimeScale.Reset", e.ChartUndo = "Chart.Undo", e.ChartShowAllIdeas = "Chart.ShowAllIdeas", e.ChartShowIdeasOfFollowedUsers = "Chart.ShowIdeasOfFollowedUsers", e.ChartShowMyIdeasOnly = "Chart.ShowMyIdeasOnly", e.ChartToggleVisibilityAllLineTools = "Chart.ToggleVisibility.AllLineTools", e.ChartToggleVisibilityContinuousContractSwitch = "Chart.ToggleVisibility.ContinuousContractSwitch", e.ChartToggleVisibilityContractExpiration = "Chart.ToggleVisibility.ContractExpiration", e.ChartToggleVisibilityDividends = "Chart.ToggleVisibility.Dividends", e.ChartToggleVisibilityEarnings = "Chart.ToggleVisibility.Earnings", e.ChartToggleVisibilityEconomicEvents = "Chart.ToggleVisibility.EconomicEvents", e.ChartToggleVisibilitySplits = "Chart.ToggleVisibility.Splits", e.ChartToggleVisibilityLatestNewsAndMinds = "Chart.ToggleVisibility.LatestNewsAndMinds", e.ChartSourceIntervalsVisibility = "Chart.Source.IntervalsVisibility", e.ChartSourceIntervalsVisibilityCurrentAndAbove = "Chart.Source.IntervalsVisibility.CurrentAndAbove", e.ChartSourceIntervalsVisibilityCurrentAndBelow = "Chart.Source.IntervalsVisibility.CurrentAndBelow", e.ChartSourceIntervalsVisibilityOnlyCurrent = "Chart.Source.IntervalsVisibility.Current", e.ChartSourceIntervalsVisibilityAll = "Chart.Source.IntervalsVisibility.All", e.NoteCreate = "Note.Create", e.NoteEdit = "Note.Edit", e.NoteRemove = "Note.Remove", e.ObjectsTreeCreateGroup = "ObjectsTree.CreateGroup", e.ObjectsTreeRemoveItem = "ObjectsTree.RemoveItem", e.ObjectsTreeRenameItem = "ObjectsTree.RenameItem", e.ObjectsTreeToggleItemLocked = "ObjectsTree.ToggleItemLocked", e.ObjectsTreeToggleItemVisibility = "ObjectsTree.ToggleItemVisibility", e.PineEditorConsoleCopyMessage = "PineEditor.Console.CopyMessage", e.PineEditorConsoleToggleVisibility = "PineEditor.Console.ToggleVisibility", e.PineEditorConsoleClear = "PineEditor.Console.Clear", e.ScreenerAddSymbolToCompare = "Screener.AddSymbolToCompare", e.ScreenerColumnRemove = "Screener.Column.Remove", e.ScreenerFilterChange = "Screener.Filter.Change", e.ScreenerFilterReset = "Screener.Filter.Reset", e.ScreenerOpenSymbolChart = "Screener.OpenSymbolChart", e.ScreenerOpenSymbolOverview = "Screener.OpenSymbolOverview", e.ScreenerToggleVisibilityCurrency = "Screener.ToggleVisibility.Currency", e.ScreenerToggleVisibilityDescription = "Screener.ToggleVisibility.Description", e.ScreenerToggleVisibilityRating = "Screener.ToggleVisibility.Rating", e.ScreenerToggleVisibilitySymbolType = "Screener.ToggleVisibility.SymbolType", e.TradingCancelOrder = "Trading.CancelOrder", e.TradingClosePosition = "Trading.ClosePosition", e.TradingCustomActionId = "Trading.CustomActionId", e.TradingDOMPlaceLimitOrder = "Trading.DOMPlaceLimitOrder", e.TradingDOMPlaceMarketOrder = "Trading.DOMPlaceMarketOrder", e.TradingDOMPlaceStopLimitOrder = "Trading.DOMPlaceStopLimitOrder", e.TradingDOMPlaceStopOrder = "Trading.DOMPlaceStopOrder", e.TradingEditOrder = "Trading.EditOrder", e.TradingModifyPosition = "Trading.ModifyPosition", e.TradingReversePosition = "Trading.ReversePosition", e.TradingSellBuyButtonsToggleVisibility = "Trading.SellBuyButtonsToggleVisibility", e.TradingTradeFromChart = "Trading.TradeFromChart", e.TradingNoOverlapMode = "Trading.NoOverlapMode", e.TradingShowSelectBrokerPanel = "Trading.ShowSelectBrokerPanel", e.TradingOrderTitle = "Trading.OrderTitle", e.TradingPositionTitle = "Trading.PositionTitle", e.WatchlistActions = "Watchlist.Actions", e.WatchlistAddSelectedSymbolsToCompare = "Watchlist.AddSelectedSymbolsToCompare ", e.WatchlistAddSymbolToCompare = "Watchlist.AddSymbolToCompare", e.WatchlistAddSymbolToSection = "Watchlist.AddSymbolToSection", e.WatchlistChangeFlaggedGroupColor = "Watchlist.ChangeFlaggedGroupColor", e.WatchlistAddSymbol = "Watchlist.AddSymbol", e.WatchlistCreate = "Watchlist.Create", e.WatchlistAddSelectedSymbols = "Watchlist.AddSelectedSymbols", e.WatchlistAddSelectedSymbolsLists = "Watchlist.AddSelectedSymbols.Lists", e.WatchlistGetDisplayedTickerDescription = "Watchlist.GetDisplayedTickerDescription", e.WatchlistCreateSection = "Watchlist.CreateSection", e.WatchlistFlagSelectedSymbols = "Watchlist.FlagSelectedSymbols", e.WatchlistFlagSymbol = "Watchlist.FlagSymbol", e.WatchlistOpenSymbolChart = "Watchlist.OpenSymbolChart", e.WatchlistOpenSymbolOverview = "Watchlist.OpenSymbolOverview", e.WatchlistRemoveSection = "Watchlist.RemoveSection", e.WatchlistRemoveSymbol = "Watchlist.RemoveSymbol", e.WatchlistRenameSection = "Watchlist.RenameSection", e.WatchlistUnflagAllSymbols = "Watchlist.UnflagAllSymbols", e.WatchlistUnflagSelectedSymbols = "Watchlist.UnflagSelectedSymbols", e.WatchlistUnflagSymbol = "Watchlist.UnflagSymbol"
            }(i || (i = {})), (a || (a = {})).extractErrorReason = function(e) {
                    return e.params[1]
                },
                function(e) {
                    e.Default = "default", e.FullSingleSession = "full_single_session"
                }(n || (n = {})),
                function(e) {
                    e.PeriodBack = "period-back", e.TimeRange = "time-range"
                }(o || (o = {})),
                function(e) {
                    e.PeriodBack = "period-back", e.TimeRange = "time-range"
                }(s || (s = {})),
                function(e) {
                    e.Open = "market", e.Pre = "pre_market", e.Post = "post_market", e.Close = "out_of_session", e.Holiday = "holiday"
                }(l || (l = {})),
                function(e) {
                    e.Separator = "separator", e.Action = "action"
                }(c || (c = {})),
                function(e) {
                    e[e.All = 0] = "All", e[e.BarMarks = 1] = "BarMarks", e[e.TimeScaleMarks = 2] = "TimeScaleMarks"
                }(d || (d = {})),
                function(e) {
                    e[e.Line = 0] = "Line", e[e.Histogram = 1] = "Histogram", e[e.Cross = 3] = "Cross", e[e.Area = 4] = "Area", e[e.Columns = 5] = "Columns", e[e.Circles = 6] = "Circles", e[e.LineWithBreaks = 7] = "LineWithBreaks", e[e.AreaWithBreaks = 8] = "AreaWithBreaks", e[e.StepLine = 9] = "StepLine", e[e.StepLineWithDiamonds = 10] = "StepLineWithDiamonds", e[e.StepLineWithBreaks = 11] = "StepLineWithBreaks"
                }(u || (u = {})),
                function(e) {
                    e.Line = "line", e.Colorer = "colorer", e.BarColorer = "bar_colorer", e.BgColorer = "bg_colorer", e.TextColorer = "text_colorer", e.OhlcColorer = "ohlc_colorer", e.CandleWickColorer = "wick_colorer", e.CandleBorderColorer = "border_colorer", e.UpColorer = "up_colorer", e.DownColorer = "down_colorer", e.Shapes = "shapes", e.Chars = "chars", e.Arrows = "arrows", e.Data = "data", e.DataOffset = "dataoffset", e.OhlcOpen = "ohlc_open", e.OhlcHigh = "ohlc_high", e.OhlcLow = "ohlc_low", e.OhlcClose = "ohlc_close"
                }(h || (h = {})), (p || (p = {})).AlertCondition = "alertcondition",
                function(e) {
                    e[e.None = 0] = "None", e[e.Pane = 1] = "Pane", e[e.DataWindow = 2] = "DataWindow", e[e.PriceScale = 4] = "PriceScale", e[e.StatusLine = 8] = "StatusLine", e[e.All = 15] = "All"
                }(g || (g = {})),
                function(e) {
                    e[e.None = 0] = "None", e[e.Pane = 1] = "Pane", e[e.DataWindow = 2] = "DataWindow", e[e.PriceScale = 4] = "PriceScale", e[e.StatusLine = 8] = "StatusLine", e[e.All = 15] = "All"
                }(m || (m = {})),
                function(e) {
                    e.OhlcBars = "ohlc_bars", e.OhlcCandles = "ohlc_candles"
                }(f || (f = {})),
                function(e) {
                    e.Auto = "auto", e.Tiny = "tiny", e.Small = "small", e.Normal = "normal", e.Large = "large", e.Huge = "huge"
                }(y || (y = {})),
                function(e) {
                    e.Integer = "integer", e.Float = "float", e.Price = "price", e.Bool = "bool", e.Text = "text", e.Symbol = "symbol", e.Session = "session", e.Source = "source", e.Resolution = "resolution", e.Time = "time", e.BarTime = "bar_time", e.Color = "color", e.Textarea = "text_area"
                }(C || (C = {})),
                function(e) {
                    e[e.None = 0] = "None", e[e.DataWindow = 2] = "DataWindow", e[e.StatusLine = 8] = "StatusLine", e[e.All = 15] = "All"
                }(b || (b = {})),
                function(e) {
                    e.InitialCapital = "initial_capital", e.Currency = "currency", e.DefaultQTYValue = "default_qty_value", e.DefaultQTYType = "default_qty_type", e.Pyramiding = "pyramiding", e.ComissionValue = "commission_value", e.ComissionType = "commission_type", e.BacktestFillLimitsAssumtion = "backtest_fill_limits_assumption", e.Slippage = "slippage", e.CalcOnOrderFills = "calc_on_order_fills", e.CalcOnEveryTick = "calc_on_every_tick", e.MarginLong = "margin_long", e.MarginShort = "margin_short", e.UseBarMagnifier = "use_bar_magnifier", e.ProcessOrdersOnClose = "process_orders_on_close", e.FillOrdersOnStandardOHLC = "fill_orders_on_standard_ohlc"
                }(S || (S = {})),
                function(e) {
                    e.Fixed = "fixed", e.CashPerOrder = "cash_per_order", e.PercentOfEquity = "percent_of_equity"
                }(T || (T = {})),
                function(e) {
                    e.Percent = "percent", e.CashPerContract = "cash_per_contract", e.CashPerOrder = "cash_per_order"
                }(v || (v = {})),
                function(e) {
                    e.FirstBar = "first_visible_bar_time", e.LastBar = "last_visible_bar_time", e.Realtime = "subscribeRealtime"
                }(w || (w = {})),
                function(e) {
                    e.FgColor = "__chart_fgcolor", e.BgColor = "__chart_bgcolor"
                }(P || (P = {})),
                function(e) {
                    e[e.Right = 0] = "Right", e[e.Left = 1] = "Left", e[e.NoScale = 2] = "NoScale"
                }(_ || (_ = {})),
                function(e) {
                    e[e.Right = 0] = "Right", e[e.Left = 1] = "Left", e[e.None = 2] = "None"
                }(x || (x = {})),
                function(e) {
                    e.TypePlots = "plot_plot", e.TypeHlines = "hline_hline"
                }(L || (L = {})),
                function(e) {
                    e[e.StopLoss = 0] = "StopLoss", e[e.TrailingStop = 1] = "TrailingStop", e[e.GuaranteedStop = 2] = "GuaranteedStop"
                }(A || (A = {})), (k || (k = {})).Symbol = "symbol",
                function(e) {
                    e[e.PopUp = 0] = "PopUp", e[e.Notification = 1] = "Notification"
                }(I || (I = {})),
                function(e) {
                    e[e.CONNECTED = 1] = "CONNECTED", e[e.CONNECTING = 2] = "CONNECTING", e[e.DISCONNECTED = 3] = "DISCONNECTED", e[e.ERROR = 4] = "ERROR"
                }(j || (j = {})),
                function(e) {
                    e[e.Connected = 1] = "Connected", e[e.Connecting = 2] = "Connecting", e[e.Disconnected = 3] = "Disconnected", e[e.Error = 4] = "Error"
                }(R || (R = {})),
                function(e) {
                    e[e.LIMIT = 1] = "LIMIT", e[e.MARKET = 2] = "MARKET", e[e.STOP = 3] = "STOP", e[e.STOPLIMIT = 4] = "STOPLIMIT"
                }(N || (N = {})),
                function(e) {
                    e[e.Limit = 1] = "Limit", e[e.Market = 2] = "Market", e[e.Stop = 3] = "Stop", e[e.StopLimit = 4] = "StopLimit"
                }(D || (D = {})),
                function(e) {
                    e[e.BUY = 1] = "BUY", e[e.SELL = -1] = "SELL"
                }(O || (O = {})),
                function(e) {
                    e[e.Buy = 1] = "Buy", e[e.Sell = -1] = "Sell"
                }(E || (E = {})),
                function(e) {
                    e[e.CANCELED = 1] = "CANCELED", e[e.FILLED = 2] = "FILLED", e[e.INACTIVE = 3] = "INACTIVE", e[e.PLACING = 4] = "PLACING", e[e.REJECTED = 5] = "REJECTED", e[e.WORKING = 6] = "WORKING"
                }(F || (F = {})),
                function(e) {
                    e[e.ALL = 0] = "ALL", e[e.CANCELED = 1] = "CANCELED", e[e.FILLED = 2] = "FILLED", e[e.INACTIVE = 3] = "INACTIVE", e[e.REJECTED = 5] = "REJECTED", e[e.WORKING = 6] = "WORKING"
                }(M || (M = {})),
                function(e) {
                    e[e.Canceled = 1] = "Canceled", e[e.Filled = 2] = "Filled", e[e.Inactive = 3] = "Inactive", e[e.Placing = 4] = "Placing", e[e.Rejected = 5] = "Rejected", e[e.Working = 6] = "Working"
                }(V || (V = {})),
                function(e) {
                    e[e.All = 0] = "All", e[e.Canceled = 1] = "Canceled", e[e.Filled = 2] = "Filled", e[e.Inactive = 3] = "Inactive", e[e.Rejected = 5] = "Rejected", e[e.Working = 6] = "Working"
                }(B || (B = {})),
                function(e) {
                    e[e.Order = 1] = "Order", e[e.Position = 2] = "Position"
                }(W || (W = {})),
                function(e) {
                    e[e.ORDER = 1] = "ORDER", e[e.POSITION = 2] = "POSITION"
                }(U || (U = {})),
                function(e) {
                    e[e.Order = 1] = "Order", e[e.Position = 2] = "Position", e[e.IndividualPosition = 3] = "IndividualPosition"
                }(z || (z = {})),
                function(e) {
                    e[e.StopLoss = 0] = "StopLoss", e[e.TakeProfit = 1] = "TakeProfit", e[e.TrailingStop = 2] = "TrailingStop", e[e.GuaranteedStop = 3] = "GuaranteedStop"
                }(G || (G = {})),
                function(e) {
                    e[e.LIMITPRICE = 1] = "LIMITPRICE", e[e.STOPPRICE = 2] = "STOPPRICE", e[e.TAKEPROFIT = 3] = "TAKEPROFIT", e[e.STOPLOSS = 4] = "STOPLOSS"
                }(H || (H = {})),
                function(e) {
                    e[e.LimitPrice = 1] = "LimitPrice", e[e.StopPrice = 2] = "StopPrice", e[e.TakeProfit = 3] = "TakeProfit", e[e.StopLoss = 4] = "StopLoss", e[e.Quantity = 5] = "Quantity"
                }(Y || (Y = {})),
                function(e) {
                    e[e.ERROR = 0] = "ERROR", e[e.SUCCESS = 1] = "SUCCESS"
                }(q || (q = {})),
                function(e) {
                    e[e.Error = 0] = "Error", e[e.Success = 1] = "Success"
                }(J || (J = {})),
                function(e) {
                    e[e.Demo = 1] = "Demo", e[e.Real = 0] = "Real"
                }(Z || (Z = {})),
                function(e) {
                    e.Information = "information", e.Warning = "warning", e.Error = "error"
                }(K || (K = {})),
                function(e) {
                    e.Demo = "demo", e.Live = "live"
                }(Q || (Q = {})),
                function(e) {
                    e[e.LogOut = 0] = "LogOut", e[e.FailedRestoring = 1] = "FailedRestoring", e[e.Offline = 2] = "Offline", e[e.APIError = 3] = "APIError", e[e.TwoFactorRequired = 4] = "TwoFactorRequired", e[e.CancelAuthorization = 5] = "CancelAuthorization", e[e.TimeOutForAuthorization = 6] = "TimeOutForAuthorization", e[e.OauthError = 7] = "OauthError", e[e.BrokenConnection = 8] = "BrokenConnection", e[e.FailedSignIn = 9] = "FailedSignIn"
                }($ || ($ = {})),
                function(e) {
                    e[e.None = 0] = "None", e[e.Pips = 1] = "Pips", e[e.Ticks = 2] = "Ticks"
                }(X || (X = {})),
                function(e) {
                    e.Halted = "HALTED", e.NotShortable = "NOT-SHORTABLE", e.HardToBorrow = "HARD-TO-BORROW"
                }(ee || (ee = {})),
                function(e) {
                    e[e.Limit = 1] = "Limit", e[e.Stop = 2] = "Stop"
                }(et || (et = {})),
                function(e) {
                    e.Disallowed = "disallowed", e.Allowed = "allowed", e.AllowedWithWarning = "allowed_with_warning"
                }(er || (er = {})),
                function(e) {
                    e.PlaceOrder = "place_order", e.ModifyOrder = "modify_order", e.CancelOrder = "cancel_order", e.ModifyPosition = "modify_position", e.ClosePosition = "close_position", e.ModifyIndividualPosition = "modify_individual_position", e.CloseIndividualPosition = "close_individual_position", e.CloseNetPosition = "close_net_position"
                }(ei || (ei = {})),
                function(e) {
                    e.Date = "date", e.DateOrDateTime = "dateOrDateTime", e.Default = "default", e.Fixed = "fixed", e.FixedInCurrency = "fixedInCurrency", e.VariablePrecision = "variablePrecision", e.FormatQuantity = "formatQuantity", e.FormatPrice = "formatPrice", e.FormatPriceForexSup = "formatPriceForexSup", e.FormatPriceInCurrency = "formatPriceInCurrency", e.IntegerSeparated = "integerSeparated", e.LocalDate = "localDate", e.LocalDateOrDateTime = "localDateOrDateTime", e.Percentage = "percentage", e.Pips = "pips", e.Profit = "profit", e.ProfitInInstrumentCurrency = "profitInInstrumentCurrency", e.Side = "side", e.PositionSide = "positionSide", e.Status = "status", e.Symbol = "symbol", e.Text = "text", e.Type = "type", e.MarginPercent = "marginPercent", e.Empty = "empty"
                }(ea || (ea = {})),
                function(e) {
                    e[e.LastPriceAndPercentageValue = 0] = "LastPriceAndPercentageValue", e[e.LastValueAccordingToScale = 1] = "LastValueAccordingToScale"
                }(en || (en = {})),
                function(e) {
                    e[e.Solid = 0] = "Solid", e[e.Dotted = 1] = "Dotted", e[e.Dashed = 2] = "Dashed"
                }(eo || (eo = {})),
                function(e) {
                    e[e.Offline = 0] = "Offline", e[e.Resolving = 1] = "Resolving", e[e.Loading = 2] = "Loading", e[e.Ready = 3] = "Ready", e[e.InvalidSymbol = 4] = "InvalidSymbol", e[e.Snapshot = 5] = "Snapshot", e[e.EOD = 6] = "EOD", e[e.Pulse = 7] = "Pulse", e[e.Delayed = 8] = "Delayed", e[e.DelayedSteaming = 9] = "DelayedSteaming", e[e.NoBars = 10] = "NoBars", e[e.Replay = 11] = "Replay", e[e.Error = 12] = "Error", e[e.CalculationError = 13] = "CalculationError", e[e.UnsupportedResolution = 14] = "UnsupportedResolution"
                }(es || (es = {})),
                function(e) {
                    e[e.Markers = 0] = "Markers", e[e.Stepline = 1] = "Stepline", e[e.Simple = 2] = "Simple"
                }(el || (el = {})),
                function(e) {
                    e[e.Bar = 0] = "Bar", e[e.Candle = 1] = "Candle", e[e.Line = 2] = "Line", e[e.Area = 3] = "Area", e[e.Renko = 4] = "Renko", e[e.Kagi = 5] = "Kagi", e[e.PnF = 6] = "PnF", e[e.LineBreak = 7] = "LineBreak", e[e.HeikinAshi = 8] = "HeikinAshi", e[e.HollowCandle = 9] = "HollowCandle", e[e.Baseline = 10] = "Baseline", e[e.Range = 11] = "Range", e[e.HiLo = 12] = "HiLo", e[e.Column = 13] = "Column", e[e.LineWithMarkers = 14] = "LineWithMarkers", e[e.Stepline = 15] = "Stepline", e[e.HLCArea = 16] = "HLCArea", e[e.VolFootprint = 17] = "VolFootprint", e[e.TPO = 18] = "TPO", e[e.VolCandle = 19] = "VolCandle", e[e.SVP = 20] = "SVP"
                }(ec || (ec = {})),
                function(e) {
                    e.TwentyFourHours = "24-hours", e.TwelveHours = "12-hours"
                }(ed || (ed = {})),
                function(e) {
                    e[e.Initial = 2] = "Initial", e[e.SeriesZOrderIsAlwaysZero = 3] = "SeriesZOrderIsAlwaysZero", e[e.Current = 3] = "Current"
                }(eu || (eu = {})),
                function(e) {
                    e[e.Money = 0] = "Money", e[e.Pips = 1] = "Pips", e[e.Percentage = 2] = "Percentage"
                }(eh || (eh = {})),
                function(e) {
                    e[e.Left = 0] = "Left", e[e.Center = 1] = "Center", e[e.Right = 2] = "Right"
                }(ep || (ep = {})), eh.Money, eh.Money, ep.Right,
                function(e) {
                    e[e.Background = 0] = "Background", e[e.Foreground = 1] = "Foreground", e[e.Topmost = 2] = "Topmost"
                }(eg || (eg = {})),
                function(e) {
                    e[e.Unavailable = 0] = "Unavailable", e[e.AvailableReadonlyAlwaysDisabled = 1] = "AvailableReadonlyAlwaysDisabled", e[e.AvailableReadonlyAlwaysEnabled = 2] = "AvailableReadonlyAlwaysEnabled", e[e.Available = 3] = "Available"
                }(em || (em = {})),
                function(e) {
                    e[e.ViewportChangeUserAction = 0] = "ViewportChangeUserAction", e[e.DataUpdate = 1] = "DataUpdate", e[e.SeriesRestart = 2] = "SeriesRestart", e[e.SeriesCompleted = 3] = "SeriesCompleted", e[e.StudyCreation = 4] = "StudyCreation"
                }(ef || (ef = {})),
                function(e) {
                    e[e.Chart = 0] = "Chart"
                }(ey || (ey = {})),
                function(e) {
                    e.AlwaysOn = "alwaysOn", e.VisibleOnMouseOver = "visibleOnMouseOver", e.AlwaysOff = "alwaysOff"
                }(eC || (eC = {})),
                function(e) {
                    e[e.Normal = 0] = "Normal", e[e.Log = 1] = "Log", e[e.Percentage = 2] = "Percentage", e[e.IndexedTo100 = 3] = "IndexedTo100"
                }(eb || (eb = {})),
                function(e) {
                    e[e.Bars = 0] = "Bars", e[e.Candles = 1] = "Candles", e[e.Line = 2] = "Line", e[e.Area = 3] = "Area", e[e.HeikenAshi = 8] = "HeikenAshi", e[e.HollowCandles = 9] = "HollowCandles", e[e.Baseline = 10] = "Baseline", e[e.HiLo = 12] = "HiLo", e[e.Column = 13] = "Column", e[e.LineWithMarkers = 14] = "LineWithMarkers", e[e.Stepline = 15] = "Stepline", e[e.HLCArea = 16] = "HLCArea", e[e.VolCandle = 19] = "VolCandle", e[e.Renko = 4] = "Renko", e[e.Kagi = 5] = "Kagi", e[e.PointAndFigure = 6] = "PointAndFigure", e[e.LineBreak = 7] = "LineBreak"
                }(eS || (eS = {})), (eT || (eT = {})).Value = "_seriesId",
                function(e) {
                    e.LeftToRight = "left_to_right", e.RightToLeft = "right_to_left"
                }(ev || (ev = {})),
                function(e) {
                    e.Relative = "relative", e.Absolute = "absolute"
                }(ew || (ew = {})),
                function(e) {
                    e.UpDown = "Up/Down", e.Total = "Total", e.Delta = "Delta"
                }(eP || (eP = {})),
                function(e) {
                    e.AboveBar = "AboveBar", e.BelowBar = "BelowBar", e.Top = "Top", e.Bottom = "Bottom", e.Right = "Right", e.Left = "Left", e.Absolute = "Absolute", e.AbsoluteUp = "AbsoluteUp", e.AbsoluteDown = "AbsoluteDown"
                }(e_ || (e_ = {})),
                function(e) {
                    e.Left = "left", e.Center = "center", e.Right = "right"
                }(ex || (ex = {})),
                function(e) {
                    e.Top = "top", e.Middle = "middle", e.Bottom = "bottom"
                }(eL || (eL = {})),
                function(e) {
                    e[e.Solid = 0] = "Solid", e[e.Dotted = 1] = "Dotted", e[e.Dashed = 2] = "Dashed"
                }(eA || (eA = {}));
            let eD = {
                    width: 800,
                    height: 500,
                    interval: "1D",
                    timezone: "Etc/UTC",
                    container: "",
                    library_path: "",
                    locale: "en",
                    widgetbar: {
                        details: !1,
                        watchlist: !1,
                        news: !1,
                        datawindow: !1,
                        watchlist_settings: {
                            default_symbols: []
                        }
                    },
                    overrides: {
                        "mainSeriesProperties.showCountdown": !1
                    },
                    studies_overrides: {},
                    trading_customization: {
                        position: {},
                        order: {}
                    },
                    brokerConfig: {
                        configFlags: {}
                    },
                    fullscreen: !1,
                    autosize: !1,
                    disabled_features: [],
                    enabled_features: [],
                    debug: !1,
                    logo: {},
                    time_frames: [{
                        text: "5y",
                        resolution: "1W"
                    }, {
                        text: "1y",
                        resolution: "1W"
                    }, {
                        text: "6m",
                        resolution: "120"
                    }, {
                        text: "3m",
                        resolution: "60"
                    }, {
                        text: "1m",
                        resolution: "30"
                    }, {
                        text: "5d",
                        resolution: "5"
                    }, {
                        text: "1d",
                        resolution: "1"
                    }],
                    client_id: "0",
                    user_id: "0",
                    charts_storage_api_version: "1.0",
                    favorites: {
                        intervals: [],
                        chartTypes: [],
                        indicators: [],
                        drawingTools: []
                    }
                },
                eO = JSON.parse('[{"iso":"ar","dir":"rtl","language":"ar"},{"iso":"pt","dir":"ltr","language":"pt"},{"iso":"ca","dir":"ltr","language":"ca_ES"},{"iso":"cs","dir":"ltr","language":"cs"},{"iso":"de","dir":"ltr","language":"de"},{"iso":"en","dir":"ltr","language":"en"},{"iso":"es","dir":"ltr","language":"es"},{"iso":"fa","dir":"rtl","language":"fa"},{"iso":"fr","dir":"ltr","language":"fr"},{"iso":"he","dir":"rtl","language":"he_IL"},{"iso":"hu","dir":"ltr","language":"hu_HU"},{"iso":"id","dir":"ltr","language":"id_ID"},{"iso":"en","dir":"ltr","language":"en"},{"iso":"it","dir":"ltr","language":"it"},{"iso":"ja","dir":"ltr","language":"ja"},{"iso":"ko","dir":"ltr","language":"ko"},{"iso":"ms","dir":"ltr","language":"ms_MY"},{"iso":"pl","dir":"ltr","language":"pl"},{"iso":"ru","dir":"ltr","language":"ru"},{"iso":"sv","dir":"ltr","language":"sv"},{"iso":"th","dir":"ltr","language":"th"},{"iso":"tr","dir":"ltr","language":"tr"},{"iso":"vi","dir":"ltr","language":"vi"},{"iso":"zh-Hans","dir":"ltr","language":"zh"},{"iso":"zh-Hant","dir":"ltr","language":"zh_TW"},{"iso":"el","dir":"ltr","language":"el"},{"iso":"nl","dir":"ltr","language":"nl_NL"},{"iso":"ro","dir":"ltr","language":"ro"}]'),
                eE = !1,
                eF = class {
                    setDebugMode(e) {
                        this._innerAPI().setDebugMode(e)
                    }
                    onChartReady(e) {
                        this._ready ? e.call(this) : this._readyHandlers.push(e)
                    }
                    headerReady() {
                        return this._innerWindowLoaded.then(() => this._innerWindow().headerReady())
                    }
                    onGrayedObjectClicked(e) {
                        this._doWhenInnerApiLoaded(t => {
                            t.onGrayedObjectClicked(e)
                        })
                    }
                    onShortcut(e, t) {
                        this._doWhenInnerWindowLoaded(r => {
                            r.createShortcutAction(e, t)
                        })
                    }
                    subscribe(e, t) {
                        this._doWhenInnerApiLoaded(r => {
                            r.subscribe(e, t)
                        })
                    }
                    unsubscribe(e, t) {
                        this._doWhenInnerApiLoaded(r => {
                            r.unsubscribe(e, t)
                        })
                    }
                    chart(e) {
                        return this._innerAPI().chart(e)
                    }
                    getLanguage() {
                        return this._options.locale
                    }
                    setSymbol(e, t, r) {
                        this._innerAPI().changeSymbol(e, t, r)
                    }
                    remove() {
                        window.removeEventListener("resize", this._onWindowResize), this._readyHandlers.splice(0, this._readyHandlers.length), delete window[this._id], this._iFrame.parentNode && this._iFrame.parentNode.removeChild(this._iFrame)
                    }
                    closePopupsAndDialogs() {
                        this._doWhenInnerApiLoaded(e => {
                            e.closePopupsAndDialogs()
                        })
                    }
                    selectLineTool(e, t) {
                        this._innerAPI().selectLineTool(e, t)
                    }
                    selectedLineTool() {
                        return this._innerAPI().selectedLineTool()
                    }
                    save(e, t) {
                        this._innerAPI().saveChart(e, t)
                    }
                    load(e, t) {
                        this._innerAPI().loadChart({
                            json: e,
                            extendedData: t
                        })
                    }
                    getSavedCharts(e) {
                        this._innerAPI().getSavedCharts(e)
                    }
                    loadChartFromServer(e) {
                        this._innerAPI().loadChartFromServer(e)
                    }
                    saveChartToServer(e, t, r) {
                        this._innerAPI().saveChartToServer(e, t, r)
                    }
                    removeChartFromServer(e, t) {
                        this._innerAPI().removeChartFromServer(e, t)
                    }
                    onContextMenu(e) {
                        this._doWhenInnerApiLoaded(t => {
                            t.onContextMenu(e)
                        })
                    }
                    createButton(e) {
                        return this._innerWindow().createButton(e)
                    }
                    createDropdown(e) {
                        return this._innerWindow().createDropdown(e)
                    }
                    showNoticeDialog(e) {
                        this._doWhenInnerApiLoaded(t => {
                            t.showNoticeDialog(e)
                        })
                    }
                    showConfirmDialog(e) {
                        this._doWhenInnerApiLoaded(t => {
                            t.showConfirmDialog(e)
                        })
                    }
                    showLoadChartDialog() {
                        this._innerAPI().showLoadChartDialog()
                    }
                    showSaveAsChartDialog() {
                        this._innerAPI().showSaveAsChartDialog()
                    }
                    symbolInterval() {
                        return this._innerAPI().getSymbolInterval()
                    }
                    mainSeriesPriceFormatter() {
                        return this._innerAPI().mainSeriesPriceFormatter()
                    }
                    getIntervals() {
                        return this._innerAPI().getIntervals()
                    }
                    getStudiesList() {
                        return this._innerAPI().getStudiesList()
                    }
                    getStudyInputs(e) {
                        return this._innerAPI().getStudyInputs(e)
                    }
                    getStudyStyles(e) {
                        return this._innerAPI().getStudyStyles(e)
                    }
                    addCustomCSSFile(e) {
                        this._innerWindow().addCustomCSSFile(e)
                    }
                    applyOverrides(e) {
                        this._options = eN(this._options, {
                            overrides: e
                        }), this._doWhenInnerWindowLoaded(t => {
                            t.applyOverrides(e)
                        })
                    }
                    applyStudiesOverrides(e) {
                        this._doWhenInnerWindowLoaded(t => {
                            t.applyStudiesOverrides(e)
                        })
                    }
                    watchList() {
                        return this._innerAPI().watchlist()
                    }
                    news() {
                        return this._innerAPI().news()
                    }
                    widgetbar() {
                        return this._innerAPI().widgetbar()
                    }
                    activeChart() {
                        return this._innerAPI().activeChart()
                    }
                    activeChartIndex() {
                        return this._innerAPI().activeChartIndex()
                    }
                    setActiveChart(e) {
                        return this._innerAPI().setActiveChart(e)
                    }
                    chartsCount() {
                        return this._innerAPI().chartsCount()
                    }
                    layout() {
                        return this._innerAPI().layout()
                    }
                    setLayout(e) {
                        this._innerAPI().setLayout(e)
                    }
                    layoutName() {
                        return this._innerAPI().layoutName()
                    }
                    resetLayoutSizes(e) {
                        this._innerAPI().resetLayoutSizes(e)
                    }
                    changeTheme(e, t) {
                        return this._innerWindow().changeTheme(e, t)
                    }
                    getTheme() {
                        return this._innerWindow().getTheme()
                    }
                    takeScreenshot() {
                        this._doWhenInnerApiLoaded(e => {
                            e.takeScreenshot()
                        })
                    }
                    lockAllDrawingTools() {
                        return this._innerAPI().lockAllDrawingTools()
                    }
                    hideAllDrawingTools() {
                        return this._innerAPI().hideAllDrawingTools()
                    }
                    drawOnAllChartsEnabled() {
                        return this._innerAPI().drawOnAllChartsEnabled()
                    }
                    drawOnAllCharts(e) {
                        this._innerAPI().drawOnAllCharts(e)
                    }
                    magnetEnabled() {
                        return this._innerAPI().magnetEnabled()
                    }
                    magnetMode() {
                        return this._innerAPI().magnetMode()
                    }
                    undoRedoState() {
                        return this._innerAPI().undoRedoState()
                    }
                    setIntervalLinkingEnabled(e) {
                        this._innerAPI().setIntervalLinkingEnabled(e)
                    }
                    setDateRangeLinkingEnabled(e) {
                        this._innerAPI().setDateRangeLinkingEnabled(e)
                    }
                    setTimeFrame(e) {
                        this._innerAPI().setTimeFrame(e)
                    }
                    symbolSync() {
                        return this._innerAPI().symbolSync()
                    }
                    intervalSync() {
                        return this._innerAPI().intervalSync()
                    }
                    crosshairSync() {
                        return this._innerAPI().crosshairSync()
                    }
                    timeSync() {
                        return this._innerAPI().timeSync()
                    }
                    dateRangeSync() {
                        return this._innerAPI().dateRangeSync()
                    }
                    setFeatureEnabled(e, t) {
                        this._innerAPI().setFeatureEnabled(e, t)
                    }
                    getAllFeatures() {
                        return this._innerWindow().getAllFeatures()
                    }
                    clearUndoHistory() {
                        return this._innerAPI().clearUndoHistory()
                    }
                    undo() {
                        return this._innerAPI().undo()
                    }
                    redo() {
                        return this._innerAPI().redo()
                    }
                    startFullscreen() {
                        this._innerAPI().startFullscreen()
                    }
                    exitFullscreen() {
                        this._innerAPI().exitFullscreen()
                    }
                    takeClientScreenshot(e) {
                        return this._innerAPI().takeClientScreenshot(e)
                    }
                    navigationButtonsVisibility() {
                        return this._innerWindow().getNavigationButtonsVisibility()
                    }
                    paneButtonsVisibility() {
                        return this._innerWindow().getPaneButtonsVisibility()
                    }
                    dateFormat() {
                        return this._innerWindow().getDateFormat()
                    }
                    timeHoursFormat() {
                        return this._innerWindow().getTimeHoursFormat()
                    }
                    currencyAndUnitVisibility() {
                        return this._innerWindow().getCurrencyAndUnitVisibility()
                    }
                    supportedChartTypes() {
                        return this._innerAPI().supportedChartTypes()
                    }
                    watermark() {
                        return this._innerAPI().watermark()
                    }
                    customSymbolStatus() {
                        return this._innerWindow().customSymbolStatus()
                    }
                    setCSSCustomProperty(e, t) {
                        if (!1 === e.startsWith("--")) throw Error("customPropertyName should begin with a double hyphen");
                        this._innerWindow().document.body.style.setProperty(e, t)
                    }
                    getCSSCustomPropertyValue(e) {
                        if (!1 === e.startsWith("--")) throw Error("customPropertyName should begin with a double hyphen");
                        let t = this._innerWindow().document.body,
                            r = t.style.getPropertyValue(e);
                        return r || getComputedStyle(t).getPropertyValue(e)
                    }
                    unloadUnusedCharts() {
                        this._innerAPI().unloadUnusedCharts()
                    }
                    async customThemes() {
                        return this._innerWindow().customThemes()
                    }
                    linking() {
                        return this._innerAPI().linking
                    }
                    _innerAPI() {
                        return this._innerWindow().tradingViewApi
                    }
                    _innerWindow() {
                        return this._iFrame.contentWindow
                    }
                    _doWhenInnerWindowLoaded(e) {
                        this._ready ? e(this._innerWindow()) : this._innerWindowLoaded.then(() => {
                            e(this._innerWindow())
                        })
                    }
                    _doWhenInnerApiLoaded(e) {
                        this._doWhenInnerWindowLoaded(t => {
                            t.doWhenApiIsReady(() => e(this._innerAPI()))
                        })
                    }
                    _autoResizeChart() {
                        this._options.fullscreen && (this._iFrame.style.height = window.innerHeight + "px", eM && setTimeout(() => {
                            this._iFrame.style.height = window.innerHeight + "px"
                        }, 30))
                    }
                    async _create() {
                        var e, t, r, i;
                        let a = null != (t = null == (e = this._options.enabled_features) ? void 0 : e.includes("iframe_loading_same_origin")) && t,
                            n = a || null != (i = null == (r = this._options.enabled_features) ? void 0 : r.includes("iframe_loading_compatibility_mode")) && i,
                            [o, s] = this._render(!n, a),
                            l = this._options.container,
                            c = "string" == typeof l ? document.getElementById(l) : l;
                        if (null === c) throw Error("There is no such element - #".concat(this._options.container));
                        c.innerHTML = o, this._iFrame = c.querySelector("#".concat(this._id));
                        let d = this._iFrame;
                        a && await this._innerWindowEvent("sameOriginLoad"), n && (d.contentWindow ? (d.contentWindow.document.open(), d.contentWindow.document.write(s), d.contentWindow.document.close()) : console.warn("Unable to locate contentWindow for the created iframe. Please try disabling the `iframe_loading_compatibility_mode` featureset.")), this._innerWindow().addEventListener("innerWindowLoad", function(e, t) {
                            if (void 0 === e) throw Error("".concat(t, " is undefined"));
                            return e
                        }(this._innerWindowResolver, "_innerWindowResolver"), {
                            once: !0
                        }), (this._options.autosize || this._options.fullscreen) && (d.style.width = "100%", this._options.fullscreen || (d.style.height = "100%")), window.addEventListener("resize", this._onWindowResize), this._onWindowResize(), this._innerWindowLoaded.then(() => {
                            try {
                                this._innerWindow().widgetReady(() => {
                                    for (let e of (this._ready = !0, this._readyHandlers)) try {
                                        e.call(this)
                                    } catch (e) {
                                        console.error(e)
                                    }
                                    this._innerWindow().initializationFinished()
                                })
                            } catch (e) {
                                if (e instanceof Error && /widgetReady is not a function/.test(e.message)) throw Error("There was an error when loading the library. Usually this error means the library failed to load its static files. Check that the library files are available at ".concat(window.location.host, "/").concat(this._options.library_path || "", " or correct the library_path option."))
                            }
                        })
                    }
                    _innerWindowEvent(e) {
                        return new Promise(t => {
                            this._innerWindow().addEventListener(e, t, {
                                once: !0
                            })
                        })
                    }
                    _render(e, t) {
                        var r;
                        let i = window;
                        if (i[this._id] = {
                                datafeed: this._options.datafeed,
                                customFormatters: this._options.custom_formatters,
                                brokerFactory: this._options.broker_factory,
                                overrides: this._options.overrides,
                                studiesOverrides: this._options.studies_overrides,
                                tradingCustomization: this._options.trading_customization,
                                disabledFeatures: this._options.disabled_features,
                                enabledFeatures: this._options.enabled_features,
                                brokerConfig: this._options.broker_config || this._options.brokerConfig,
                                restConfig: this._options.restConfig,
                                favorites: this._options.favorites,
                                logo: this._options.logo,
                                numeric_formatting: this._options.numeric_formatting,
                                rss_news_feed: this._options.rss_news_feed,
                                rss_news_title: this._options.rss_news_title,
                                newsProvider: this._options.news_provider,
                                loadLastChart: this._options.load_last_chart,
                                saveLoadAdapter: this._options.save_load_adapter,
                                loading_screen: this._options.loading_screen,
                                settingsAdapter: this._options.settings_adapter,
                                getCustomIndicators: this._options.custom_indicators_getter,
                                additionalSymbolInfoFields: this._options.additional_symbol_info_fields,
                                headerWidgetButtonsMode: this._options.header_widget_buttons_mode,
                                customTranslateFunction: this._options.custom_translate_function,
                                symbolSearchComplete: this._options.symbol_search_complete,
                                contextMenu: this._options.context_menu,
                                settingsOverrides: this._options.settings_overrides,
                                timeframe: this._options.timeframe,
                                customTimezones: this._options.custom_timezones,
                                customChartDescriptionFunction: this._options.custom_chart_description_function,
                                customThemes: this._options.custom_themes,
                                imageStorageAdapter: this._options.image_storage_adapter
                            }, this._options.saved_data) i[this._id].chartContent = {
                            json: this._options.saved_data
                        }, this._options.saved_data_meta_info && (i[this._id].chartContentExtendedData = this._options.saved_data_meta_info);
                        else if (!this._options.load_last_chart && !this._options.symbol) throw Error("Symbol is not defined: either 'symbol' or 'load_last_chart' option must be set");
                        if (this._options.library_path && !this._options.library_path.endsWith("/") && console.warn("library_path option should contain a trailing forward slash"), this._options.locale) {
                            let e = encodeURIComponent(this._options.locale);
                            eO.findIndex(t => t.language === e) >= 0 || (console.warn("locale isn't supported. Using default of `en`."), this._options.locale = "en")
                        }
                        let a = function(e, t) {
                                var r, i;
                                let a = new URL("".concat(e || ""), location.href).href,
                                    n = JSON.parse('["bundles/runtime.0c59f90a8699f12ff40f.js","bundles/__LANG__.2312.a9353e46c20c3019a091.js","bundles/9662.03109f673cda5962c847.css","bundles/7346.a2efeed47130dd4e832c.js","bundles/library.8fdacc60e5256d6fcc84.js"]'),
                                    o = encodeURIComponent(t),
                                    s = null != (i = eO.find(e => e.language === o)) ? i : {
                                        iso: "en",
                                        dir: "ltr"
                                    },
                                    l = 'lang="'.concat(s.iso, '" dir="').concat(s.dir, '"'),
                                    c = "\n".concat(function(e, t, r) {
                                        if (void 0 === e) return "";
                                        let i = [],
                                            a = [];
                                        for (let n of e) n.endsWith(".js") ? i.push('<script defer crossorigin="anonymous" src="'.concat(n.replace("__LANG__", r), '"><\/script>')) : n.endsWith(".css") && a.push('<link type="text/css" href="'.concat(t ? n.replace(/\.css$/i, ".rtl.css") : n, '" rel="stylesheet"/>'));
                                        return [...i, ...a].join("\n")
                                    }(n, "rtl" === s.dir, o), "\n");
                                return "<!DOCTYPE html><html ".concat((r = {
                                    bundles: c,
                                    localeLanguage: o,
                                    htmlAttrs: l,
                                    libraryPath: a
                                }).htmlAttrs, '><head><base href="').concat(r.libraryPath, '"><meta charset="utf-8"><script>window===window.parent&&(location.href="about:blank")<\/script> ').concat(r.bundles, ' </head><body class="chart-page unselectable on-widget"><div class="loading-indicator" id="loading-indicator"></div><script>var JSServer={},__initialEnabledFeaturesets=["charting_library"]<\/script><script>(function() {\n		window.urlParams = (function () {\n			var match,\n				pl	 = /\\+/g,  // Regex for replacing addition symbol with a space\n				search = /([^&=]+)=?([^&]*)/g,\n				decode = function (s) { return decodeURIComponent(s.replace(pl, \' \')).replace(/<\\/?[^>]+(>|$)/g, \'\'); },\n				query = function() {\n					// We don\'t use hash on the url because: safari 13 throws an error if you attempt this\n					// on a blob, and safari 14 will strip hash from blob urls.\n					if (frameElement && frameElement.dataset.widgetOptions) {\n						return frameElement.dataset.widgetOptions;\n					} else {\n						throw "Unexpected use of this page";\n					}\n				}(),\n				result = {};\n\n			while (match = search.exec(query)) {\n				result[decode(match[1])] = decode(match[2]);\n			}\n\n			var additionalSettingsObject = window.parent[result.uid];\n\n			var customObjectNames = [\'datafeed\', \'customFormatters\', \'brokerFactory\', \'save_load_adapter\', \'customTranslateFunction\', \'contextMenu\'];\n\n			for (var p in additionalSettingsObject) {\n				if (customObjectNames.indexOf(p) === -1) {\n					result[p] = JSON.stringify(additionalSettingsObject[p]);\n				}\n			}\n\n			return result;\n		})();\n\n		window.locale = urlParams.locale;\n		window.language = urlParams.locale; // a very big attention needed here\n		window.customTranslateFunction = window.parent[urlParams.uid].customTranslateFunction;\n		window.customChartDescriptionFunction = window.parent[urlParams.uid].customChartDescriptionFunction;\n\n		window.addCustomCSSFile = function(href) {\n			var link = document.createElement(\'link\');\n			link.setAttribute(\'type\', \'text/css\');\n			link.setAttribute(\'rel\', \'stylesheet\');\n			link.setAttribute(\'href\', href);\n			link.setAttribute(\'cross-origin\', \'anonymous\');\n\n			window.loadedCustomCss = new Promise((resolve) => {\n				link.onload = resolve;\n				link.onerror = resolve;\n			});\n			document.body.appendChild(link);\n		};\n\n		window.loadedCustomCss = Promise.resolve();\n		if (!!urlParams.customCSS) {\n			window.addCustomCSSFile(urlParams.customCSS);\n		}\n\n		var loadingScreenParams = {};\n\n		if (typeof urlParams.loading_screen === \'string\') {\n			try {\n				loadingScreenParams = JSON.parse(urlParams.loading_screen);\n			} catch(e) {}\n		}\n\n		var loadingIndicatorElement = document.getElementById(\'loading-indicator\');\n\n		if (loadingScreenParams.backgroundColor) {\n			loadingIndicatorElement.style = \'background-color: \' + loadingScreenParams.backgroundColor;\n		}\n\n		!function(){"use strict";var t,e=new WeakMap;!function(t){t[t.Element=1]="Element",t[t.Document=9]="Document"}(t||(t={}));var n={mini:"xsmall",xxsmall:"xxsmall",xsmall:"xsmall",small:"small",medium:"medium",large:"large"};var s,i,o,r,l,c=(void 0===l&&(l=""),s=\'<div class="tv-spinner \'.concat(l,\'" role="progressbar"></div>\'),o=function(n,s){var i,o;return i=null==s?document.documentElement:s.nodeType===t.Document?s.documentElement:s,e&&(o=e.get(i)),o||((o=i.ownerDocument.createRange()).selectNodeContents(i),e&&e.set(i,o)),o.createContextualFragment(n)}(s,i),null!==(r=o.firstElementChild)&&o.removeChild(r),r),a=function(){function t(t){this._shown=!1,this._el=c.cloneNode(!0),this.setSize(n[t||"large"])}return t.prototype.spin=function(t){return this._el.classList.add("tv-spinner--shown"),void 0===this._container&&(this._container=t,void 0!==t&&t.appendChild(this._el)),this._shown=!0,this},t.prototype.stop=function(t){return t&&void 0!==this._container&&this._container.removeChild(this._el),this._el&&this._el.classList.remove("tv-spinner--shown"),this._shown=!1,this},t.prototype.setStyle=function(t){var e=this;return Object.keys(t).forEach((function(n){var s=t[n];void 0!==s&&e._el.style.setProperty(n,s)})),this},t.prototype.style=function(){return this._el.style},t.prototype.setSize=function(t){var e=void 0!==t?"tv-spinner--size_".concat(t):"";return this._el.className="tv-spinner ".concat(e," ").concat(this._shown?"tv-spinner--shown":""),this},t.prototype.getEl=function(){return this._el},t.prototype.destroy=function(){this.stop(),delete this._el,delete this._container},t}();window.Spinner=a}();\n\n\n		var spinnerColor = (loadingScreenParams.foregroundColor) ? loadingScreenParams.foregroundColor : undefined;\n\n		var loadingSpinner = new Spinner(\'large\').setStyle({\n			\'--tv-spinner-color\': spinnerColor,\n			zIndex: String(2e9),\n		});\n		loadingSpinner.getEl().classList.add(\'spinner\');\n		loadingSpinner.spin(loadingIndicatorElement);\n	})();<\/script></body></html>')
                            }(this._options.library_path || "", this._options.locale),
                            n = new URL("about:blank");
                        if (e) {
                            let e = new Blob([a], {
                                    type: "text/html"
                                }),
                                t = URL.createObjectURL(e);
                            n = new URL(t)
                        } else t && (n = new URL((null != (r = this._options.library_path) ? r : "/") + "sameorigin.html", location.origin));
                        let o = "symbol=" + encodeURIComponent(this._options.symbol || "") + "&interval=" + encodeURIComponent(this._options.interval) + (this._options.toolbar_bg ? "&toolbarbg=" + encodeURIComponent(this._options.toolbar_bg.replace("#", "")) : "") + (this._options.studies_access ? "&studiesAccess=" + encodeURIComponent(JSON.stringify(this._options.studies_access)) : "") + "&widgetbar=" + encodeURIComponent(JSON.stringify(this._options.widgetbar)) + (this._options.drawings_access ? "&drawingsAccess=" + encodeURIComponent(JSON.stringify(this._options.drawings_access)) : "") + "&timeFrames=" + encodeURIComponent(JSON.stringify(this._options.time_frames)) + "&locale=" + encodeURIComponent(this._options.locale) + "&uid=" + encodeURIComponent(this._id) + "&clientId=" + encodeURIComponent(String(this._options.client_id)) + "&userId=" + encodeURIComponent(String(this._options.user_id)) + (this._options.charts_storage_url ? "&chartsStorageUrl=" + encodeURIComponent(this._options.charts_storage_url) : "") + (this._options.charts_storage_api_version ? "&chartsStorageVer=" + encodeURIComponent(this._options.charts_storage_api_version) : "") + (this._options.custom_css_url ? "&customCSS=" + encodeURIComponent(this._options.custom_css_url) : "") + (this._options.custom_font_family ? "&customFontFamily=" + encodeURIComponent(this._options.custom_font_family) : "") + (this._options.auto_save_delay ? "&autoSaveDelay=" + encodeURIComponent(String(this._options.auto_save_delay)) : "") + "&debug=" + encodeURIComponent(String(this._options.debug)) + (this._options.debug_broker ? "&debugBroker=" + encodeURIComponent(String(this._options.debug_broker)) : "") + (this._options.snapshot_url ? "&snapshotUrl=" + encodeURIComponent(this._options.snapshot_url) : "") + (this._options.timezone ? "&timezone=" + encodeURIComponent(this._options.timezone) : "") + (this._options.study_count_limit ? "&studyCountLimit=" + encodeURIComponent(String(this._options.study_count_limit)) : "") + (this._options.symbol_search_request_delay ? "&ssreqdelay=" + encodeURIComponent(String(this._options.symbol_search_request_delay)) : "") + (this._options.compare_symbols ? "&compareSymbols=" + encodeURIComponent(JSON.stringify(this._options.compare_symbols)) : "") + (this._options.theme ? "&theme=" + encodeURIComponent(String(this._options.theme)) : "") + (this._options.header_widget_buttons_mode ? "&header_widget_buttons_mode=" + encodeURIComponent(String(this._options.header_widget_buttons_mode)) : "") + (this._options.time_scale ? "&time_scale=" + encodeURIComponent(JSON.stringify(this._options.time_scale)) : "");
                        return ['<iframe\n		version="CL v28.5.0 (internal id fb6f897f @ 2024-12-18T12:27:11.562Z)" id="'.concat(this._id, '" name="').concat(this._id, '" src="').concat(n.href, '" data-widget-options="').concat(o, '"\n		').concat(this._options.autosize || this._options.fullscreen ? "" : 'width="'.concat(this._options.width, '" height="').concat(this._options.height, '"'), ' title="Financial Chart" frameborder="0" allowTransparency="true" scrolling="no" allowfullscreen style="display:block;">\n	</iframe>'), a]
                    }
                    constructor(e) {
                        var t, r;
                        if (this._id = "tradingview_".concat((1048576 * (1 + Math.random()) | 0).toString(16).substring(1)), this._ready = !1, this._readyHandlers = [], this._onWindowResize = this._autoResizeChart.bind(this), !e.datafeed) throw Error("Datafeed is not defined");
                        (null == (t = e.overrides) ? void 0 : t["mainSeriesProperties.priceAxisProperties.lockScale"]) && (console.warn("mainSeriesProperties.priceAxisProperties.lockScale can not be set to true within the widget constructor"), delete e.overrides["mainSeriesProperties.priceAxisProperties.lockScale"]), this._options = eN(eD, e), "dark" === (null != (r = this._options.theme) ? r : "light").toLowerCase() && void 0 === this._options.loading_screen && (this._options.loading_screen = {
                            backgroundColor: "#131722"
                        }), (this._options.debug || this._options.debug_broker) && (eE || (eE = !0, console.log("Using CL v28.5.0 (internal id fb6f897f @ 2024-12-18T12:27:11.562Z)"))), this._innerWindowLoaded = new Promise(e => {
                            this._innerWindowResolver = e
                        }), this._create()
                    }
                };
            window.TradingView = window.TradingView || {}, window.TradingView.version = function() {
                return "CL v28.5.0 (internal id fb6f897f @ 2024-12-18T12:27:11.562Z)"
            };
            let eM = !(!window.navigator || !window.navigator.userAgent) && window.navigator.userAgent.includes("CriOS");
            var eV = r(91150),
                eB = r(55114),
                eW = r(66312),
                eU = r.n(eW),
                ez = r(48669),
                eG = r(78602),
                eH = r(6902),
                eY = r(25035);
            let eq = eI.forwardRef((e, t) => {
                let {
                    className: r,
                    value: i,
                    onValueChange: a,
                    ...n
                } = e, [o, s] = (0, eI.useState)(!1), l = Array.isArray(i) ? i[0] : 0;
                return (0, ek.jsxs)(ez.bL, {
                    ref: t,
                    value: i,
                    onValueChange: a,
                    className: (0, eG.cn)("relative flex w-full touch-none select-none items-center", r),
                    ...n,
                    children: [(0, ek.jsx)(ez.CC, {
                        className: "relative h-1 w-full grow overflow-hidden rounded-full bg-primary/20",
                        children: (0, ek.jsx)(ez.Q6, {
                            className: "absolute h-full bg-primary"
                        })
                    }), (0, ek.jsx)(eY.Bc, {
                        children: (0, ek.jsxs)(eH.m_, {
                            open: o,
                            children: [(0, ek.jsx)(eH.k$, {
                                asChild: !0,
                                children: (0, ek.jsx)(ez.zi, {
                                    onPointerDown: () => s(!0),
                                    onPointerUp: () => s(!1),
                                    className: (0, eG.cn)("block rounded-full bg-primary transition-colors focus-visible:outline-none disabled:pointer-events-none disabled:opacity-50", o ? "h-4 w-4" : "h-3.5 w-3.5")
                                })
                            }), (0, ek.jsx)(eH.ZI, {
                                side: "top",
                                children: l
                            })]
                        })
                    })]
                })
            });
            eq.displayName = ez.bL.displayName;
            var eJ = r(32433),
                eZ = r(53357),
                eK = r(8484),
                eQ = r(75438),
                e$ = r(21115);
            let eX = ["1m", "2m", "3m", "5m", "10m", "15m", "30m", "1hr", "4hr"];

            function e0(e) {
                let {
                    barReplayStart: t,
                    barReplayStop: r,
                    barReplaySpeed: i,
                    barReplayStep: a,
                    barReplayStepSize: n,
                    barReplaySync: o,
                    isPlaying: s,
                    setIsPlaying: l,
                    sync: c,
                    setSync: d,
                    chartInterval: u
                } = e, [h, p] = (0, eI.useState)(1), [g, m] = (0, eI.useState)([...eX]), [f, y] = (0, eI.useState)("1m"), [C, b] = (0, eI.useState)(!1), S = (0, eI.useRef)(null), {
                    shortcuts: T
                } = (0, e$.J)(), v = e => e % 60 == 0 ? "".concat(e / 60, "hr") : "".concat(e, "m"), w = e => e.endsWith("hr") ? 60 * parseInt(e) : parseInt(e), P = () => {
                    l(e => !e), s ? r() : t()
                }, _ = e => {
                    p(e), i(e)
                }, x = e => {
                    _(Math.min(10, Math.max(.5, Number((h + e).toFixed(1)))))
                }, L = e => {
                    var t;
                    let r = e.split("+");
                    return {
                        key: null == (t = r.pop()) ? void 0 : t.toLowerCase(),
                        modifiers: r.map(e => e.toLowerCase())
                    }
                }, A = (e, t) => {
                    let {
                        key: r,
                        modifiers: i
                    } = L(t);
                    if (!r || e.key.toLowerCase() !== r) return !1;
                    let a = new Set(i);
                    if (e.shiftKey !== a.has("shift") || e.altKey !== a.has("alt")) return !1;
                    let n = a.has("control") || a.has("ctrl") || a.has("meta");
                    return (e.ctrlKey || e.metaKey) === n
                };
                return (0, eI.useEffect)(() => {
                    let e = e => {
                        let t = e.target;
                        (null == t ? void 0 : t.tagName) !== "INPUT" && (null == t ? void 0 : t.tagName) !== "TEXTAREA" && (null == t || !t.isContentEditable) && (A(e, T.playPause) ? (e.preventDefault(), P()) : A(e, T.skip) ? (e.preventDefault(), a()) : A(e, T.increaseSpeed) ? (e.preventDefault(), x(.5)) : A(e, T.decreaseSpeed) && (e.preventDefault(), x(-.5)))
                    };
                    return window.addEventListener("keydown", e), () => window.removeEventListener("keydown", e)
                }, [T, h, s]), (0, ek.jsxs)(ek.Fragment, {
                    children: [C && (0, ek.jsx)("div", {
                        className: "fixed inset-0 z-30 bg-black/5"
                    }), (0, ek.jsx)(eU(), {
                        handle: ".handle",
                        nodeRef: S,
                        onStart: () => b(!0),
                        onStop: () => b(!1),
                        bounds: "body",
                        children: (0, ek.jsxs)("div", {
                            ref: S,
                            className: "pointer-events-auto fixed top-[10%] right-1/4 z-40 flex items-center bg-white/50 dark:bg-background/80 dark:border dark:border-white/50 p-1 rounded-md shadow w-fit backdrop-blur-sm gap-1.5",
                            children: [(0, ek.jsx)("div", {
                                className: "handle cursor-move",
                                children: (0, ek.jsx)(eK.Pn8, {
                                    size: 20,
                                    className: "text-foreground/80"
                                })
                            }), (0, ek.jsx)(eH.Bc, {
                                children: (0, ek.jsxs)(eH.m_, {
                                    children: [(0, ek.jsx)(eH.k$, {
                                        asChild: !0,
                                        children: (0, ek.jsx)("div", {
                                            children: (0, ek.jsx)(eq, {
                                                value: [h],
                                                min: .5,
                                                max: 10,
                                                step: .5,
                                                onValueChange: e => {
                                                    let [t] = e;
                                                    return _(t)
                                                },
                                                className: "w-[72px]"
                                            })
                                        })
                                    }), (0, ek.jsxs)(eH.ZI, {
                                        side: "bottom",
                                        className: "flex flex-col gap-1 mt-2",
                                        children: [(0, ek.jsxs)("span", {
                                            children: ["Increase speed: ", T.increaseSpeed]
                                        }), (0, ek.jsxs)("span", {
                                            children: ["Decrease speed: ", T.decreaseSpeed]
                                        })]
                                    })]
                                })
                            }), (0, ek.jsx)(eQ.A, {
                                icon: s ? "pause" : "play",
                                mode: "hover",
                                onClick: P,
                                hoverColor: "cyanLight",
                                iconSize: 14,
                                tooltip: "Play/Pause (".concat(T.playPause, ")")
                            }), (0, ek.jsx)(eQ.A, {
                                icon: "skip",
                                mode: "hover",
                                onClick: a,
                                hoverColor: "cyanLight",
                                iconSize: 14,
                                tooltip: "Skip (".concat(T.skip, ")")
                            }), (0, ek.jsx)(eZ.d, {
                                className: "mx-2",
                                checked: c,
                                onCheckedChange: e => {
                                    if (d(e), o(e), e) {
                                        let e = v(u);
                                        g.includes(e) || m(t => [...t, e]), y(e)
                                    }
                                },
                                disabled: u > 240
                            }), (0, ek.jsxs)(eJ.l6, {
                                value: f,
                                onValueChange: e => {
                                    y(e), d(!1), o(!1), n(w(e))
                                },
                                children: [(0, ek.jsx)(eJ.bq, {
                                    className: "w-fit gap-2 p-2 h-7",
                                    children: (0, ek.jsx)(eJ.yv, {})
                                }), (0, ek.jsx)(eJ.gC, {
                                    children: g.map(e => (0, ek.jsx)(eJ.eb, {
                                        value: e,
                                        children: e
                                    }, e))
                                })]
                            })]
                        })
                    })]
                })
            }
            var e1 = r(81774),
                e2 = r(67823),
                e5 = r(86792),
                e3 = r(44161);
            let e4 = (0, e3.createServerReference)("7f7983744841c57a8f9c21e79b68523535f121a6b8", e3.callServer, void 0, e3.findSourceMapURL, "deleteTradesAfterDate"),
                e8 = (0, e3.createServerReference)("7f051ebcb94b5d956b831e9dfbc6288baf0934d265", e3.callServer, void 0, e3.findSourceMapURL, "setSessionModified");
            var e6 = r(10837),
                e9 = r(7989),
                e7 = r(24199),
                te = r(40929),
                tt = r(18395),
                tr = r(91363),
                ti = r(25187),
                ta = r(36507),
                tn = r(65275),
                to = r(11518),
                ts = r.n(to),
                tl = r(61451);
            let tc = (0, e3.createServerReference)("7f230586db9cb80e4e9900a083aca50a2a8f428ea0", e3.callServer, void 0, e3.findSourceMapURL, "saveTrade");
            var td = r(32885),
                tu = r(3897);
            let th = (0, e3.createServerReference)("40d18697987584cba19c8c3849d8e09ffb0ff21c89", e3.callServer, void 0, e3.findSourceMapURL, "incrementTradeDayCount");
            var tp = r(89738),
                tg = r(3309),
                tm = r(44127),
                tf = r(74756),
                ty = r(17547),
                tC = r(72982),
                tb = r(4274),
                tS = r(9190),
                tT = r(53389),
                tv = r(52952);

            function tw(e) {
                let {
                    open: t,
                    setOpen: r,
                    tradeData: i,
                    setTradeData: a,
                    tags: n,
                    setTags: o,
                    setNotes: s,
                    setTrades: l,
                    session: c,
                    currentBalance: d,
                    tradeFormRisk: u,
                    setTradeFormRisk: h,
                    createTradeLines: p,
                    createPositionLines: g,
                    takeScreenshot: m
                } = e, {
                    subscriptionType: f
                } = (0, e$.J)(), y = tS.z.object({
                    entryPrice: tS.z.number({
                        invalid_type_error: "Entry Price cannot be empty."
                    }),
                    stopLoss: tS.z.number({
                        invalid_type_error: "Stop Loss cannot be empty."
                    }),
                    takeProfit: tS.z.number({
                        invalid_type_error: "Take Profit cannot be empty."
                    }),
                    tradeType: tS.z.enum(["buy", "sell"]),
                    executionType: tS.z.enum(["market", "limit", "stop"]),
                    currentPrice: tS.z.number(),
                    partials: tS.z.array(tS.z.object({
                        amount: tS.z.number(),
                        price: tS.z.number()
                    })).optional()
                }).superRefine((e, t) => {
                    let {
                        tradeType: r,
                        executionType: i,
                        entryPrice: a,
                        stopLoss: n,
                        takeProfit: o,
                        currentPrice: s
                    } = e;
                    "market" === i && a !== s && t.addIssue({
                        code: tS.z.ZodIssueCode.custom,
                        message: "Market order price must match the current price.",
                        path: ["entryPrice"]
                    }), "buy" === r ? ("limit" === i && a >= s && t.addIssue({
                        code: tS.z.ZodIssueCode.custom,
                        message: "Entry Price should be below the current price for Buy Limit trades.",
                        path: ["entryPrice"]
                    }), "stop" === i && a <= s && t.addIssue({
                        code: tS.z.ZodIssueCode.custom,
                        message: "Entry Price should be above the current price for Buy Stop trades.",
                        path: ["entryPrice"]
                    }), n >= a && t.addIssue({
                        code: tS.z.ZodIssueCode.custom,
                        message: "Stop Loss should be below the Entry Price for Buy trades.",
                        path: ["stopLoss"]
                    }), o <= a && t.addIssue({
                        code: tS.z.ZodIssueCode.custom,
                        message: "Take Profit should be above the Entry Price for Buy trades.",
                        path: ["takeProfit"]
                    })) : ("limit" === i && a <= s && t.addIssue({
                        code: tS.z.ZodIssueCode.custom,
                        message: "Entry Price should be above the current price for Sell Limit trades.",
                        path: ["entryPrice"]
                    }), "stop" === i && a >= s && t.addIssue({
                        code: tS.z.ZodIssueCode.custom,
                        message: "Entry Price should be below the current price for Sell Stop trades.",
                        path: ["entryPrice"]
                    }), n <= a && t.addIssue({
                        code: tS.z.ZodIssueCode.custom,
                        message: "Stop Loss should be above the Entry Price for Sell trades.",
                        path: ["stopLoss"]
                    }), o >= a && t.addIssue({
                        code: tS.z.ZodIssueCode.custom,
                        message: "Take Profit should be below the Entry Price for Sell trades.",
                        path: ["takeProfit"]
                    }));
                    let l = e.partials || [],
                        c = Math.abs(a - n),
                        d = 0 === c ? 0 : parseFloat((u.riskAmount / c).toFixed(5));
                    for (let [e, r] of(l.reduce((e, t) => e + (0 === d ? 0 : t.amount / d * 100), 0) > 100 && t.addIssue({
                            code: tS.z.ZodIssueCode.custom,
                            message: "Total partial amounts cannot exceed 100%.",
                            path: ["partials"]
                        }), l.entries())) {
                        (r.amount && !r.price || r.price && !r.amount) && t.addIssue({
                            code: tS.z.ZodIssueCode.custom,
                            message: "Partial price and amount required.",
                            path: ["partials", e]
                        });
                        let i = Math.min(n, o),
                            a = Math.max(n, o);
                        (r.price <= i || r.price >= a) && t.addIssue({
                            code: tS.z.ZodIssueCode.custom,
                            message: "Partial price must be between Stop Loss and Take Profit.",
                            path: ["partials", e]
                        })
                    }
                });

                function C(e) {
                    return e.length > 1 && "0" === e[0] && "." !== e[1] ? e.slice(1) : e
                }
                let [b, S] = (0, eI.useState)(""), [T, v] = (0, eI.useState)(""), [w, P] = (0, eI.useState)(""), _ = (0, eI.useRef)(null), x = (0, eI.useRef)(""), [L, A] = (0, eI.useState)([]), [k, I] = (0, eI.useState)([]), [j, R] = (0, eI.useState)(""), [N, D] = (0, eI.useState)(""), [O, E] = (0, eI.useState)({
                    entryPrice: "",
                    stopLoss: "",
                    takeProfit: "",
                    risk: "",
                    partial: "",
                    noteTitle: ""
                }), [F, M] = (0, eI.useState)(!1), [V, B] = (0, eI.useState)(!1), [W, U] = (0, eI.useState)([]);
                (0, eI.useEffect)(() => {
                    var e, r;
                    if (!t) return;
                    S(i.entryPrice.toString()), v(i.takeProfit.toString()), P(i.stopLoss.toString());
                    let a = Math.abs(i.entryPrice - i.stopLoss),
                        n = 0 === a ? 0 : parseFloat((u.riskAmount / a).toFixed(5));
                    A((null == (e = i.partials) ? void 0 : e.map(e => 0 === n ? "0" : (e.amount / n * 100).toString())) || []), I((null == (r = i.partials) ? void 0 : r.map(e => e.price.toString())) || []), R(u.riskPercentage.toString()), D(u.riskAmount.toString()), E({
                        entryPrice: "",
                        stopLoss: "",
                        takeProfit: "",
                        risk: "",
                        partial: "",
                        noteTitle: ""
                    })
                }, [t]), (0, eI.useEffect)(() => {
                    t && B(!1)
                }, [t]), (0, eI.useEffect)(() => {
                    t || V || U([])
                }, [t, V]), (0, eI.useEffect)(() => {
                    let e = "" === b ? 0 : parseFloat(b),
                        t = "" === T ? 0 : parseFloat(T),
                        r = "" === w ? 0 : parseFloat(w);
                    a(i => ({
                        ...i,
                        entryPrice: e,
                        takeProfit: t,
                        stopLoss: r
                    }))
                }, [b, T, w, a]);
                let z = function(e) {
                        let t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 2,
                            r = e.replace(/[^\d.]/g, "");
                        r.startsWith(".") && (r = "0" + r);
                        let i = r.split(".");
                        i.length > 2 && (r = i[0] + "." + i.slice(1).join(""));
                        let [a, n] = r.split(".");
                        return void 0 !== n ? "".concat(a, ".").concat(n.slice(0, t)) : a
                    },
                    G = (e, t, r) => Math.min(r, Math.max(t, e));
                (0, eI.useEffect)(() => {
                    let e = Math.abs(i.entryPrice - i.stopLoss),
                        t = 0 === e ? 0 : parseFloat((u.riskAmount / e).toFixed(5));
                    a(e => {
                        if (!e.partials) return e;
                        let r = e.partials.map((e, r) => {
                            let i = parseFloat(L[r] || "0");
                            return {
                                ...e,
                                amount: parseFloat((t * i / 100).toFixed(5))
                            }
                        });
                        return {
                            ...e,
                            partials: r
                        }
                    })
                }, [i.entryPrice, i.stopLoss, u.riskAmount, L]);
                let H = (e, t, r) => {
                        let n = C(r),
                            o = i.partials ? [...i.partials] : [];
                        if (o[e] || (o[e] = {
                                price: 0,
                                amount: 0,
                                status: "pending"
                            }), "percentage" === t) {
                            let t = Math.max(100 - L.reduce((t, r, i) => t + (i === e ? 0 : parseFloat(r) || 0), 0), 0),
                                r = Math.min(parseFloat(n) || 0, t),
                                a = Math.abs(i.entryPrice - i.stopLoss),
                                s = 0 === a ? 0 : parseFloat((u.riskAmount / a).toFixed(5));
                            o[e].amount = parseFloat((s * r / 100).toFixed(5)), A(t => {
                                let i = [...t];
                                return i[e] = r.toString(), i
                            })
                        } else {
                            let t = parseFloat(n) || 0;
                            o[e].price = t, I(t => {
                                let r = [...t];
                                return r[e] = n, r
                            })
                        }
                        a(e => ({
                            ...e,
                            partials: o
                        }))
                    },
                    Y = () => {
                        a(e => ({
                            ...e,
                            partials: [...e.partials || [], {
                                price: 0,
                                amount: 0,
                                status: "pending"
                            }]
                        })), A(e => [...e, "0"]), I(e => [...e, "0"])
                    },
                    q = async () => {
                        let e = W.length;
                        U(e => [...e, {}]), B(!1), r(!0);
                        let t = await m();
                        if (t) {
                            let r = t.match(/([A-Za-z0-9]+)(?:\.png)?$/),
                                i = r ? "https://www.tradingview.com/x/".concat(r[1], "/") : void 0;
                            U(t => {
                                let r = [...t];
                                return r[e] = {
                                    url: i
                                }, r
                            })
                        } else U(t => t.filter((t, r) => r !== e)), tn.oR.error("Failed to take screenshot")
                    }, J = () => {
                        var e;
                        let t = {
                                entryPrice: "",
                                stopLoss: "",
                                takeProfit: "",
                                risk: "",
                                partial: "",
                                noteTitle: ""
                            },
                            r = y.safeParse({
                                entryPrice: i.entryPrice,
                                stopLoss: i.stopLoss,
                                takeProfit: i.takeProfit,
                                tradeType: i.tradeType,
                                executionType: i.executionType,
                                currentPrice: null != (e = i.currentPrice) ? e : 0,
                                partials: i.partials
                            });
                        if (!r.success)
                            for (let e of r.error.issues) {
                                let r = e.path[0];
                                "entryPrice" === r ? t.entryPrice = e.message : "stopLoss" === r ? t.stopLoss = e.message : "takeProfit" === r ? t.takeProfit = e.message : "partials" === r && (t.partial = e.message)
                            }
                        return (u.riskAmount <= 0 || u.riskPercentage <= 0) && (t.risk = "Risk Percent/Amount must be above 0."), E(t), Object.values(t).every(e => "" === e)
                    }, Z = () => {
                        let e = i.entryPrice,
                            t = i.stopLoss,
                            r = Math.abs(i.takeProfit - e),
                            a = Math.abs(e - t);
                        return 0 === a ? "N/A" : (r / a).toFixed(2).toString()
                    }, K = async () => {
                        if (M(!0), W.length > 0 && (!i.noteTitle || "" === i.noteTitle.trim())) {
                            E(e => ({
                                ...e,
                                noteTitle: "Please add a title when attaching screenshots."
                            })), M(!1);
                            return
                        }
                        try {
                            var e, t, n, o;
                            let d;
                            if (!J()) return;
                            if ("pro" !== f && (null == (e = i.partials) ? void 0 : e.length)) {
                                a(e => ({
                                    ...e,
                                    partials: []
                                })), tn.oR.info("Partials are a Pro feature");
                                return
                            }
                            let h = Math.abs(i.entryPrice - i.stopLoss),
                                m = 0 === h ? 0 : parseFloat((u.riskAmount / h).toFixed(5)),
                                y = {
                                    sessionId: c.id,
                                    pair: i.pair,
                                    entryPrice: i.entryPrice,
                                    stopLoss: i.stopLoss,
                                    takeProfit: i.takeProfit,
                                    initialStopLoss: i.stopLoss,
                                    initialTakeProfit: i.takeProfit,
                                    tradeType: i.tradeType,
                                    status: i.status,
                                    executionType: i.executionType,
                                    riskAmount: u.riskAmount,
                                    riskToReward: Z(),
                                    partials: (null != (o = i.partials) ? o : []).filter(e => e.amount && e.price).map(e => ({
                                        amount: e.amount,
                                        price: e.price,
                                        status: "pending"
                                    })),
                                    startDate: void 0,
                                    quantity: m,
                                    tags: i.tags || []
                                };
                            if ("market" === i.executionType ? (y.startDate = i.currentDate, y.status = "open", d = await tc(y), g(d)) : (d = await tc(y), p(d)), l(e => [...e, d]), await th(), "" !== ((null == (t = i.noteTitle) ? void 0 : t.trim()) || "") || "" !== ((null == (n = i.noteBody) ? void 0 : n.trim()) || "")) {
                                let e = c.folderId;
                                if (!e) {
                                    let t = await (0, td.b)(c.id, c.sessionName);
                                    e = t.id, c.folderId = t.id
                                }
                                let t = {
                                        tradeId: d.id,
                                        sessionId: c.id,
                                        folders: e ? [e] : [],
                                        title: i.noteTitle || "",
                                        body: i.noteBody || "",
                                        tags: i.tags || [],
                                        screenshots: W.map(e => e.url).filter(Boolean)
                                    },
                                    r = await (0, tu.C)(t);
                                s(e => [...e, r])
                            }
                            r(!1), U([])
                        } catch (e) {
                            tn.oR.error("Error saving trade")
                        } finally {
                            M(!1)
                        }
                    }, [Q, $] = (0, eI.useState)(n.filter(e => (i.tags || []).includes(e.id)));
                return ((0, eI.useEffect)(() => {
                    a(e => ({
                        ...e,
                        tags: Q.map(e => e.id)
                    }))
                }, [Q, a]), (0, eI.useEffect)(() => {
                    t && $(n.filter(e => (i.tags || []).includes(e.id)))
                }, [t, n]), t) ? (0, ek.jsxs)(ek.Fragment, {
                    children: [(0, ek.jsx)(e6.lG, {
                        open: t,
                        onOpenChange: r,
                        children: (0, ek.jsx)(e9.R3, {
                            className: "max-w-[52rem] p-0 overflow-x-hidden overflow-y-auto bg-background",
                            children: (0, ek.jsxs)("div", {
                                className: "grid md:grid-cols-[53.5%_46.5%] grid-rows-[auto_1fr_auto]",
                                children: [(0, ek.jsx)("div", {
                                    className: "col-start-1 row-start-1 p-4 rounded-tr-lg bg-card border-r border-border",
                                    children: (0, ek.jsx)(e9.Bi, {
                                        title: "Place a Trade:"
                                    })
                                }), (0, ek.jsx)("div", {
                                    className: "col-start-2 row-start-1"
                                }), (0, ek.jsxs)(e7.Wu, {
                                    className: "col-start-1 row-start-2 bg-card border-r border-border",
                                    children: [(0, ek.jsxs)(e7.nE, {
                                        className: "flex flex-row w-full justify-center items-center gap-8 mt-4",
                                        children: [(0, ek.jsx)(tr.A, {
                                            options: ["Buy", "Sell"],
                                            size: "small",
                                            value: "sell" === i.tradeType ? "Sell" : "Buy",
                                            onChange: e => a(t => ({
                                                ...t,
                                                tradeType: e.toLowerCase()
                                            }))
                                        }), (0, ek.jsx)(tr.A, {
                                            options: ["Limit", "Market", "Stop"],
                                            size: "small",
                                            value: i.executionType.charAt(0).toUpperCase() + i.executionType.slice(1),
                                            onChange: e => {
                                                let t = e.toLowerCase();
                                                if ("market" === t) {
                                                    var r;
                                                    _.current = i.entryPrice, x.current = b;
                                                    let e = null != (r = i.currentPrice) ? r : i.entryPrice;
                                                    S(e.toString()), a(r => ({
                                                        ...r,
                                                        executionType: t,
                                                        entryPrice: e
                                                    }));
                                                    return
                                                }
                                                if ("market" === i.executionType && null !== _.current) {
                                                    S(x.current), a(e => ({
                                                        ...e,
                                                        executionType: t,
                                                        entryPrice: _.current
                                                    })), _.current = null, x.current = "";
                                                    return
                                                }
                                                a(e => ({
                                                    ...e,
                                                    executionType: t
                                                }))
                                            }
                                        })]
                                    }), (0, ek.jsxs)(e7.nE, {
                                        children: [(0, ek.jsx)(te.J, {
                                            htmlFor: "entryPrice",
                                            children: "Entry Price"
                                        }), (0, ek.jsx)(tt.p, {
                                            id: "entryPrice",
                                            type: "text",
                                            value: b,
                                            onChange: e => {
                                                S(C(e.target.value))
                                            }
                                        }), O.entryPrice && (0, ek.jsx)(tb.d, {
                                            color: "yellow",
                                            children: O.entryPrice
                                        })]
                                    }), (0, ek.jsxs)("div", {
                                        className: "grid grid-cols-2 gap-2",
                                        children: [(0, ek.jsxs)(e7.nE, {
                                            children: [(0, ek.jsx)(te.J, {
                                                htmlFor: "takeProfit",
                                                children: "Take Profit"
                                            }), (0, ek.jsx)(tt.p, {
                                                id: "takeProfit",
                                                type: "text",
                                                value: T,
                                                onChange: e => {
                                                    v(C(e.target.value))
                                                }
                                            }), O.takeProfit && (0, ek.jsx)(tb.d, {
                                                color: "yellow",
                                                children: O.takeProfit
                                            })]
                                        }), (0, ek.jsxs)(e7.nE, {
                                            children: [(0, ek.jsx)(te.J, {
                                                htmlFor: "stopLoss",
                                                children: "Stop Loss"
                                            }), (0, ek.jsx)(tt.p, {
                                                id: "stopLoss",
                                                type: "text",
                                                value: w,
                                                onChange: e => {
                                                    P(C(e.target.value))
                                                }
                                            }), O.stopLoss && (0, ek.jsx)(tb.d, {
                                                color: "yellow",
                                                children: O.stopLoss
                                            })]
                                        })]
                                    }), (0, ek.jsx)(tp.Separator, {
                                        className: "my-2"
                                    }), (0, ek.jsx)(e7.nE, {
                                        className: "flex flex-row w-full justify-center items-center gap-8",
                                        children: (0, ek.jsx)(tr.A, {
                                            options: ["Initial Balance", "Current Balance"],
                                            size: "small",
                                            onChange: e => {
                                                var t;
                                                return t = "Initial Balance" === e ? "initial" : "current", void h(e => {
                                                    let r = "initial" === t ? c.startingBalance : d,
                                                        i = parseFloat((r * e.riskPercentage / 100).toFixed(2)),
                                                        a = Math.min(r, d);
                                                    return i > a && (i = a), D(i % 1 == 0 ? i.toString() : i.toFixed(2).toString()), {
                                                        ...e,
                                                        balanceType: t,
                                                        riskAmount: i
                                                    }
                                                })
                                            }
                                        })
                                    }), (0, ek.jsxs)("div", {
                                        className: "grid grid-cols-2 gap-2",
                                        children: [(0, ek.jsxs)(e7.nE, {
                                            children: [(0, ek.jsx)(te.J, {
                                                htmlFor: "riskPercentage",
                                                children: "Risk Percent (%)"
                                            }), (0, ek.jsx)(tt.p, {
                                                id: "riskPercentage",
                                                type: "text",
                                                value: j,
                                                onChange: e => {
                                                    let t = z(e.target.value, 2);
                                                    R(t);
                                                    let r = parseFloat(t),
                                                        i = "initial" === u.balanceType ? c.startingBalance : d;
                                                    if (!isNaN(r)) {
                                                        let e = parseFloat((i * r / 100).toFixed(2));
                                                        h(t => ({
                                                            ...t,
                                                            riskPercentage: r,
                                                            riskAmount: e
                                                        })), D(e.toFixed(2))
                                                    }
                                                },
                                                onBlur: () => {
                                                    let e = "initial" === u.balanceType ? c.startingBalance : d,
                                                        t = Math.min(e, d),
                                                        r = "" === j.trim() ? 1 : parseFloat(j);
                                                    isNaN(r) && (r = 1);
                                                    let i = parseFloat((e * (r = G(parseFloat(r.toFixed(2)), 0, 100)) / 100).toFixed(2));
                                                    i > t && (i = t, r = 0 === e ? 0 : parseFloat((i / e * 100).toFixed(2))), R(r.toFixed(2)), D(i.toFixed(2)), h(e => ({
                                                        ...e,
                                                        riskPercentage: r,
                                                        riskAmount: i
                                                    }))
                                                }
                                            }), O.risk && (0, ek.jsx)(tb.d, {
                                                color: "yellow",
                                                children: O.risk
                                            })]
                                        }), (0, ek.jsxs)(e7.nE, {
                                            children: [(0, ek.jsx)(te.J, {
                                                htmlFor: "riskAmount",
                                                children: "Risk Amount ($)"
                                            }), (0, ek.jsx)(tt.p, {
                                                id: "riskAmount",
                                                type: "text",
                                                value: N,
                                                onChange: e => {
                                                    let t = z(e.target.value, 2);
                                                    D(t);
                                                    let r = parseFloat(t),
                                                        i = "initial" === u.balanceType ? c.startingBalance : d;
                                                    if (!isNaN(r)) {
                                                        let e = 0 === i ? 0 : parseFloat((r / i * 100).toFixed(2));
                                                        h(t => ({
                                                            ...t,
                                                            riskAmount: r,
                                                            riskPercentage: e
                                                        })), R(e.toFixed(2))
                                                    }
                                                },
                                                onBlur: () => {
                                                    let e = "initial" === u.balanceType ? c.startingBalance : d,
                                                        t = Math.min(e, d),
                                                        r = "" === N.trim() ? parseFloat((e / 100).toFixed(2)) : parseFloat(N);
                                                    isNaN(r) && (r = parseFloat((e / 100).toFixed(2))), r = G(parseFloat(r.toFixed(2)), 0, t);
                                                    let i = 0 === e ? 0 : parseFloat((r / e * 100).toFixed(2));
                                                    D(r.toFixed(2)), R(i.toFixed(2)), h(e => ({
                                                        ...e,
                                                        riskAmount: r,
                                                        riskPercentage: i
                                                    }))
                                                }
                                            }), O.risk && (0, ek.jsx)(tb.d, {
                                                color: "yellow",
                                                children: O.risk
                                            })]
                                        })]
                                    }), (0, ek.jsxs)(e7.nE, {
                                        children: [(0, ek.jsx)(te.J, {
                                            children: "Partials"
                                        }), L.length > 0 && k.length > 0 && (0, ek.jsxs)(e7.nE, {
                                            children: [(0, ek.jsxs)("div", {
                                                className: "grid grid-cols-2 gap-2",
                                                children: [(0, ek.jsx)(te.J, {
                                                    children: "Partial Amount (%)"
                                                }), (0, ek.jsx)(te.J, {
                                                    children: "Partial Price"
                                                })]
                                            }), (0, ek.jsx)("div", {
                                                className: "flex flex-col gap-1 mb-2",
                                                children: L.map((e, t) => (0, ek.jsxs)("div", {
                                                    className: "grid grid-cols-2 gap-2",
                                                    children: [(0, ek.jsx)(tt.p, {
                                                        name: "percentage",
                                                        type: "text",
                                                        value: e,
                                                        onChange: e => H(t, "percentage", e.target.value)
                                                    }), (0, ek.jsx)(tt.p, {
                                                        name: "price",
                                                        type: "text",
                                                        value: k[t] || "",
                                                        onChange: e => H(t, "price", e.target.value)
                                                    })]
                                                }, t))
                                            })]
                                        }), O.partial && (0, ek.jsx)(tb.d, {
                                            color: "yellow",
                                            children: O.partial
                                        }), (0, ek.jsxs)("div", {
                                            className: "flex justify-between",
                                            children: [(0, ek.jsx)(tg.$, {
                                                variant: "secondary",
                                                onClick: () => {
                                                    if ("pro" !== f) return void E(e => ({
                                                        ...e,
                                                        partial: "Partials is a Pro Feature"
                                                    }));
                                                    E(e => ({
                                                        ...e,
                                                        partial: ""
                                                    })), Y()
                                                },
                                                children: "Add Partial"
                                            }), !!L.length && (0, ek.jsx)(tg.$, {
                                                variant: "textOnly",
                                                onClick: () => {
                                                    a(e => ({
                                                        ...e,
                                                        partials: []
                                                    })), A([]), I([])
                                                },
                                                children: "Clear Partials"
                                            })]
                                        })]
                                    })]
                                }), (0, ek.jsx)("div", {
                                    className: "col-start-2 row-span-3 row-start-1 bg-background p-6 rounded-tr-xl space-y-2",
                                    children: "pro" === f ? (0, ek.jsxs)(ek.Fragment, {
                                        children: [(0, ek.jsxs)("div", {
                                            className: "flex flex-col gap-1",
                                            children: [(0, ek.jsx)("div", {
                                                className: "flex items-center justify-between"
                                            }), (0, ek.jsx)(tT.A, {
                                                tags: n,
                                                setTags: o,
                                                selectedTags: Q,
                                                setSelectedTags: $
                                            })]
                                        }), (0, ek.jsxs)(e7.nE, {
                                            children: [(0, ek.jsxs)(tg.$, {
                                                size: "sm",
                                                variant: "secondary",
                                                className: "flex items-center gap-1",
                                                onClick: () => {
                                                    r(!1), B(!0)
                                                },
                                                children: [(0, ek.jsx)(tm.A, {
                                                    size: 16
                                                }), " Add Screenshot"]
                                            }), W.map((e, t) => (0, ek.jsxs)("div", {
                                                className: "relative border border-border rounded-lg overflow-hidden group",
                                                children: [e.url ? (0, ek.jsx)("img", {
                                                    src: e.url,
                                                    alt: "screenshot-".concat(t),
                                                    className: "w-full"
                                                }) : (0, ek.jsx)(tv.E, {
                                                    className: "w-full h-40"
                                                }), (0, ek.jsx)("button", {
                                                    type: "button",
                                                    className: "absolute top-1 right-1 bg-black/60 text-white rounded p-1 opacity-75 hover:opacity-100",
                                                    onClick: () => U(e => e.filter((e, r) => r !== t)),
                                                    children: (0, ek.jsx)(tf.A, {
                                                        size: 12
                                                    })
                                                })]
                                            }, t)), (0, ek.jsx)(te.J, {
                                                htmlFor: "noteTitle",
                                                children: "Add Note"
                                            }), (0, ek.jsx)(tt.p, {
                                                id: "noteTitle",
                                                value: i.noteTitle || "",
                                                onChange: e => a(t => ({
                                                    ...t,
                                                    noteTitle: e.target.value
                                                })),
                                                placeholder: "Title"
                                            }), O.noteTitle && (0, ek.jsx)(tb.d, {
                                                color: "yellow",
                                                children: O.noteTitle
                                            }), (0, ek.jsx)(ta.A, {
                                                value: i.noteBody || "",
                                                onChange: e => a(t => ({
                                                    ...t,
                                                    noteBody: e
                                                }))
                                            })]
                                        })]
                                    }) : (0, ek.jsxs)("div", {
                                        className: "w-full flex items-center justify-center h-full bg-gradient-modal rounded-xl border border-border shadow-xl flex-col gap-4",
                                        children: [(0, ek.jsx)(ty.A, {
                                            size: 64,
                                            className: "text-yellow-400 fill-yellow-400"
                                        }), (0, ek.jsx)("p", {
                                            className: "text-lg text-white max-w-2/3 w-2/3 text-center",
                                            children: "Add Tags and Notes to Trades with Pro!"
                                        }), (0, ek.jsx)(ti.default, {
                                            title: "Go Pro",
                                            onClickEvent: () => (0, tl.f)("price_1Ryj5nKzt6ufjYfYw2gFlWKJ")
                                        }), (0, ek.jsx)(ts(), {
                                            href: "/setup-subscription",
                                            children: (0, ek.jsxs)(tg.$, {
                                                variant: "textOnly",
                                                className: "text-sm font-normal text-white hover:text-white/70 gap-1",
                                                children: ["View All Plans ", (0, ek.jsx)(tC.A, {
                                                    size: 18
                                                })]
                                            })
                                        })]
                                    })
                                }), (0, ek.jsx)("div", {
                                    className: "col-start-1 row-start-3 px-4 pb-4 rounded-br-lg bg-card border-r border-border",
                                    children: (0, ek.jsx)(e9.hT, {
                                        cancel: "Cancel",
                                        submit: "Save",
                                        handleSubmit: K,
                                        disabled: F,
                                        isLoading: F
                                    })
                                })]
                            })
                        })
                    }), V && (0, ek.jsx)("div", {
                        className: "fixed bottom-4 left-1/2 -translate-x-1/2 z-50",
                        children: (0, ek.jsxs)(tg.$, {
                            onClick: q,
                            variant: "default",
                            className: "flex items-center gap-1",
                            children: [(0, ek.jsx)(tm.A, {
                                size: 16
                            }), " Take Screenshot"]
                        })
                    }), "\\"]
                }) : null
            }
            var tP = r(15534);
            let t_ = (0, e3.createServerReference)("7fa5823ddad93e76b6cf1941a4114e27ba4ae4f893", e3.callServer, void 0, e3.findSourceMapURL, "saveGoToTimes"),
                tx = e => {
                    let {
                        open: t,
                        setOpen: r,
                        times: i,
                        setTimes: a
                    } = e, [n, o] = (0, eI.useState)(i);
                    (0, eI.useEffect)(() => {
                        t && o(i)
                    }, [t, i]);
                    let s = (e, t) => {
                            o(r => ({
                                ...r,
                                [e]: t
                            }))
                        },
                        l = async () => {
                            var e, t, i, o;
                            let s = {
                                london: null != (e = n.london) ? e : "08:00",
                                newYork: null != (t = n.newYork) ? t : "13:00",
                                tokyo: null != (i = n.tokyo) ? i : "00:00",
                                custom: null != (o = n.custom) ? o : "00:00"
                            };
                            await t_(s), a(s), r(!1)
                        };
                    return t ? (0, ek.jsx)(tP.lG, {
                        open: t,
                        onOpenChange: r,
                        children: (0, ek.jsxs)(e9.R3, {
                            children: [(0, ek.jsx)(e9.Bi, {
                                title: "Customise Go To Times (UTC)"
                            }), (0, ek.jsxs)(e7.Wu, {
                                children: [(0, ek.jsxs)(e7.nE, {
                                    children: [(0, ek.jsx)(te.J, {
                                        children: "London"
                                    }), (0, ek.jsx)(tt.p, {
                                        type: "time",
                                        value: n.london,
                                        onChange: e => s("london", e.target.value)
                                    })]
                                }), (0, ek.jsxs)(e7.nE, {
                                    children: [(0, ek.jsx)(te.J, {
                                        children: "New York"
                                    }), (0, ek.jsx)(tt.p, {
                                        type: "time",
                                        value: n.newYork,
                                        onChange: e => s("newYork", e.target.value)
                                    })]
                                }), (0, ek.jsxs)(e7.nE, {
                                    children: [(0, ek.jsx)(te.J, {
                                        children: "Tokyo"
                                    }), (0, ek.jsx)(tt.p, {
                                        type: "time",
                                        value: n.tokyo,
                                        onChange: e => s("tokyo", e.target.value)
                                    })]
                                }), (0, ek.jsxs)(e7.nE, {
                                    children: [(0, ek.jsx)(te.J, {
                                        children: "Custom"
                                    }), (0, ek.jsx)(tt.p, {
                                        type: "time",
                                        value: n.custom,
                                        onChange: e => s("custom", e.target.value)
                                    })]
                                })]
                            }), (0, ek.jsx)(e9.hT, {
                                cancel: "Cancel",
                                submit: "Save",
                                handleSubmit: l,
                                isLoading: !1
                            })]
                        })
                    }) : null
                };
            var tL = r(54128);
            let tA = ["Original Amount", "Current Amount"],
                tk = ["10%", "25%", "50%", "75%", "100%"],
                tI = e => {
                    let {
                        open: t,
                        setOpen: r,
                        closeTrade: i,
                        trade: a
                    } = e, {
                        subscriptionType: n
                    } = (0, e$.J)(), [o, s] = (0, eI.useState)(!1), [l, c] = (0, eI.useState)("original"), [d, u] = (0, eI.useState)("100"), [h, p] = (0, eI.useState)("");
                    if (!a || !t) return null;
                    let g = (a.partials || []).reduce((e, t) => "open" === t.status || "closed" === t.status ? e + t.amount : e, 0) / a.quantity * 100,
                        m = 100 - g,
                        f = async () => {
                            if ("free" === n) return void p("Close Trades Instantly with Basic");
                            let e = parseFloat(d) || 0,
                                t = "original" === l ? e : e / 100 * m;
                            if (("basic" === n || "ad-free" === n) && ("original" !== l || 100 !== e)) return void p("Partials is a Pro Feature");
                            s(!0), await i(a.id, t, !0), s(!1), r(!1)
                        };
                    return (0, ek.jsx)(tP.lG, {
                        open: t,
                        onOpenChange: r,
                        children: (0, ek.jsxs)(e9.R3, {
                            children: [(0, ek.jsx)(e9.Bi, {
                                title: "Close Trade"
                            }), (0, ek.jsxs)(e7.Wu, {
                                className: "gap-4",
                                children: [(0, ek.jsxs)(e7.nE, {
                                    className: "w-full flex items-center justify-center gap-4",
                                    children: [(0, ek.jsx)(tr.A, {
                                        options: tA,
                                        onChange: e => c(e.startsWith("Original") ? "original" : "current")
                                    }), (0, ek.jsx)(tr.A, {
                                        options: tk,
                                        onChange: e => u(e.replace("%", ""))
                                    })]
                                }), (0, ek.jsxs)(e7.nE, {
                                    children: [(0, ek.jsx)(te.J, {
                                        children: "Close Amount"
                                    }), (0, ek.jsx)(tt.p, {
                                        type: "number",
                                        value: d,
                                        onChange: e => u(e.target.value)
                                    }), h && (0, ek.jsx)(tb.d, {
                                        color: "yellow",
                                        children: h
                                    })]
                                }), (0, ek.jsxs)(e7.nE, {
                                    className: "flex justify-between items-center flex-row",
                                    children: [(0, ek.jsxs)("span", {
                                        children: ["Total Closed: ", (0, ek.jsxs)("span", {
                                            className: "font-bold",
                                            children: [Number.isInteger(g) ? g.toFixed(0) : g.toFixed(2), "%"]
                                        })]
                                    }), (0, ek.jsxs)("span", {
                                        children: ["Remaining:", (0, ek.jsxs)("span", {
                                            className: "font-bold",
                                            children: [Number.isInteger(m) ? m.toFixed(0) : m.toFixed(2), "%"]
                                        })]
                                    })]
                                }), (0, ek.jsx)(e9.hT, {
                                    cancel: "Cancel",
                                    submit: "Save",
                                    handleSubmit: f,
                                    isLoading: o
                                })]
                            })]
                        })
                    })
                };

            function tj(e) {
                let {
                    open: t,
                    setOpen: r,
                    tradeData: i,
                    setTrades: a,
                    session: n,
                    tradeFormRisk: o,
                    createTradeLines: s,
                    createPositionLines: l
                } = e, {
                    subscriptionType: c
                } = (0, e$.J)(), [, d] = (0, eI.useState)(!1);
                (0, eI.useEffect)(() => {
                    t && "free" !== c && h()
                }, [t, c]);
                let u = () => {
                        let e = i.entryPrice,
                            t = i.stopLoss,
                            r = Math.abs(i.takeProfit - e),
                            a = Math.abs(e - t);
                        return 0 === a ? "N/A" : (r / a).toFixed(2).toString()
                    },
                    h = async () => {
                        if (!i.takeProfit || !i.stopLoss) {
                            tn.oR.error("A position drawing must be selected"), r(!1);
                            return
                        }
                        d(!0);
                        try {
                            let e, t = Math.abs(i.entryPrice - i.stopLoss),
                                r = 0 === t ? 0 : parseFloat((o.riskAmount / t).toFixed(5)),
                                c = {
                                    sessionId: n.id,
                                    pair: i.pair,
                                    entryPrice: i.entryPrice,
                                    stopLoss: i.stopLoss,
                                    takeProfit: i.takeProfit,
                                    initialStopLoss: i.stopLoss,
                                    initialTakeProfit: i.takeProfit,
                                    tradeType: i.tradeType,
                                    status: i.status,
                                    executionType: i.executionType,
                                    riskAmount: o.riskAmount,
                                    riskToReward: u(),
                                    partials: [],
                                    startDate: void 0,
                                    quantity: r,
                                    tags: []
                                };
                            "market" === i.executionType ? (c.startDate = i.currentDate, c.status = "open", e = await tc(c), l(e)) : (e = await tc(c), s(e)), a(t => [...t, e]), await th()
                        } catch (e) {
                            tn.oR.error("Error saving trade")
                        } finally {
                            d(!1), r(!1)
                        }
                    };
                return null
            }
            var tR = r(54238),
                tN = r(74234);

            function tD(e) {
                let {
                    open: t,
                    setOpen: r,
                    message: i,
                    onContinue: a,
                    onCancel: n,
                    showCancel: o = !0,
                    continueLabel: s = "Continue"
                } = e;
                return t ? (0, ek.jsx)(tN.Lt, {
                    open: t,
                    onOpenChange: r,
                    children: (0, ek.jsxs)(tN.EO, {
                        children: [(0, ek.jsxs)(tN.wd, {
                            className: "flex items-center justify-center",
                            children: [(0, ek.jsx)(tN.r7, {
                                children: "Rewind"
                            }), (0, ek.jsx)(tN.$v, {
                                children: i
                            })]
                        }), (0, ek.jsxs)(tN.ck, {
                            children: [o && (0, ek.jsx)(tN.Zr, {
                                onClick: () => {
                                    r(!1), n && n()
                                },
                                children: "Cancel"
                            }), (0, ek.jsx)(tN.Rx, {
                                onClick: () => {
                                    r(!1), a && a()
                                },
                                children: s
                            })]
                        })]
                    })
                }) : null
            }
            var tO = r(17718);

            function tE(e) {
                let {
                    ...t
                } = e;
                return (0, ek.jsx)(tP.bL, {
                    "data-slot": "dialog",
                    ...t
                })
            }

            function tF(e) {
                let {
                    ...t
                } = e;
                return (0, ek.jsx)(tP.ZL, {
                    "data-slot": "dialog-portal",
                    ...t
                })
            }

            function tM(e) {
                let {
                    className: t,
                    ...r
                } = e;
                return (0, ek.jsx)(tP.hJ, {
                    "data-slot": "dialog-overlay",
                    className: (0, eG.cn)("data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50", t),
                    ...r
                })
            }

            function tV(e) {
                let {
                    className: t,
                    children: r,
                    showCloseButton: i = !0,
                    ...a
                } = e;
                return (0, ek.jsxs)(tF, {
                    "data-slot": "dialog-portal",
                    children: [(0, ek.jsx)(tM, {}), (0, ek.jsxs)(tP.UC, {
                        "data-slot": "dialog-content",
                        className: (0, eG.cn)("bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg", t),
                        ...a,
                        children: [r, i && (0, ek.jsxs)(tP.bm, {
                            "data-slot": "dialog-close",
                            className: "ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
                            children: [(0, ek.jsx)(tf.A, {}), (0, ek.jsx)("span", {
                                className: "sr-only",
                                children: "Close"
                            })]
                        })]
                    })]
                })
            }

            function tB(e) {
                let {
                    className: t,
                    ...r
                } = e;
                return (0, ek.jsx)(tP.hE, {
                    "data-slot": "dialog-title",
                    className: (0, eG.cn)("text-lg leading-none font-semibold", t),
                    ...r
                })
            }
            var tW = r(73998),
                tU = r(97442);
            let tz = () => Math.random().toString(36).substring(2, 10),
                tG = () => {
                    let e = (0, eI.useRef)("g-".concat(tz()));
                    return (0, eI.useEffect)(() => {}, []), (0, ek.jsx)("div", {
                        id: e.current,
                        className: "w-full h-48 bg-muted flex items-center justify-center rounded-md",
                        children: "Google Advertisement"
                    })
                },
                tH = () => {
                    let e = (0, eI.useRef)("g-".concat(tz()));
                    return (0, eI.useEffect)(() => {}, []), (0, ek.jsx)("div", {
                        id: e.current,
                        className: "w-full h-48 bg-muted flex items-center justify-center rounded-md",
                        children: "Google Advertisement"
                    })
                };

            function tY(e) {
                let {
                    open: t,
                    onClose: r
                } = e, [i, a] = (0, eI.useState)(30), n = (0, eI.useRef)(null), o = (0, eI.useRef)(.5 > Math.random() ? (0, ek.jsx)(tG, {}) : (0, ek.jsx)(tH, {})), s = (0, tO.t)();
                return ((0, eI.useEffect)(() => {
                    if (t) return a(30), n.current = setInterval(() => {
                        a(e => e <= 1 ? (clearInterval(n.current), 0) : e - 1)
                    }, 1e3), () => {
                        n.current && clearInterval(n.current)
                    }
                }, [t]), t) ? (0, ek.jsx)(tE, {
                    open: t,
                    onOpenChange: () => {},
                    modal: !0,
                    children: (0, ek.jsx)(tV, {
                        className: "p-0 bg-none bg-transparent border-none shadow-none [&>button]:hidden flex items-center justify-center text-foreground",
                        children: (0, ek.jsxs)("div", {
                            className: "flex flex-col lg:flex-row gap-6 items-center justify-center",
                            children: [(0, ek.jsxs)(tW.pK, {
                                className: "w-full md:w-[500px] h-fit",
                                children: [(0, ek.jsxs)(tW.uw, {
                                    children: [(0, ek.jsx)(tB, {
                                        className: "text-md md:text-lg",
                                        children: "Advertisements"
                                    }), (0, ek.jsx)(tg.$, {
                                        onClick: () => {
                                            0 === i && r()
                                        },
                                        disabled: i > 0,
                                        size: "sm",
                                        variant: "lightDestructive",
                                        children: i > 0 ? "Close in ".concat(i, "s") : "Close"
                                    })]
                                }), (0, ek.jsxs)(tW.o, {
                                    className: "text-sm md:text-base flex flex-col items-center gap-4 p-4",
                                    children: [s ? (0, ek.jsx)("p", {
                                        children: "Ad block detected, please disable it to continue."
                                    }) : o.current, (0, ek.jsx)("div", {
                                        className: "w-full text-center",
                                        children: (0, ek.jsxs)("span", {
                                            children: ["Don't want Ads?", " ", (0, ek.jsxs)(tg.$, {
                                                variant: "link",
                                                className: "p-0 text-sm md:text-base gap-1",
                                                onClick: () => (0, tl.f)("price_1Ryj2zKzt6ufjYfYwHiC1FOZ"),
                                                children: ["Go Ad‑Free Now ", (0, ek.jsx)(tC.A, {})]
                                            })]
                                        })
                                    })]
                                })]
                            }), (0, ek.jsx)("div", {
                                className: "w-full hidden sm:block md:w-[400px] rounded-lg bg-gradient-modal border border-white/40 shadow-lg text-sm md:text-base text-white",
                                children: (0, ek.jsxs)("div", {
                                    className: "rounded-lg bg-gradient-modal p-6 flex flex-col items-center justify-center text-center h-fit shadow-lg gap-4 tracking-tight",
                                    children: [(0, ek.jsxs)("span", {
                                        className: "text-lg md:text-xl font-semibold tracking-tighter leading-tight max-w-80",
                                        children: [(0, ek.jsx)("i", {
                                            children: "Accelerate"
                                        }), " Yourself to ", (0, ek.jsx)("i", {
                                            children: "Profitability"
                                        }), " in a Fraction of the Time"]
                                    }), (0, ek.jsx)("div", {
                                        className: "flex flex-col gap-4 items-center justify-center",
                                        children: (0, ek.jsx)("span", {
                                            className: "bg-[#f5d000] rounded-sm px-3 py-1 text-base md:text-lg font-bold drop-shadow-md shadow-lg shadow-yellow-300 w-fit border border-white/40 bg-opacity-100 backdrop-blur-lg",
                                            children: "BENEFITS:"
                                        })
                                    }), (0, ek.jsx)("ul", {
                                        className: "font-semibold text-base md:text-lg text-start tracking-tighter p-2 flex flex-col gap-2",
                                        children: [
                                            ["Analytics That Get ", "You", " Paid"],
                                            ["More ", "Confidence", " with More Chart Data"],
                                            ["No Ads"],
                                            ["Plus a Whole Lot More!"]
                                        ].map((e, t) => (0, ek.jsxs)("li", {
                                            className: "flex items-center gap-3 ",
                                            children: [(0, ek.jsx)(tU.A, {
                                                size: 21,
                                                strokeWidth: 3,
                                                className: "text-[#ffed2b] inline"
                                            }), (0, ek.jsx)("span", {
                                                className: "leading-tight",
                                                children: 3 === e.length ? (0, ek.jsxs)(ek.Fragment, {
                                                    children: [e[0], (0, ek.jsx)("i", {
                                                        className: "mr-1",
                                                        children: e[1]
                                                    }), e[2]]
                                                }) : e[0]
                                            })]
                                        }, t))
                                    }), (0, ek.jsxs)("div", {
                                        className: "flex flex-col gap-0 items-center justify-center w-full",
                                        children: [(0, ek.jsx)(ti.default, {
                                            title: "Get Basic Plan Now",
                                            onClickEvent: () => (0, tl.f)("price_1Ryj2zKzt6ufjYfYwHiC1FOZ"),
                                            titleClassName: "tracking-tight"
                                        }), (0, ek.jsx)(ts(), {
                                            href: "/setup-subscription",
                                            children: (0, ek.jsxs)(tg.$, {
                                                variant: "textOnly",
                                                className: "gap-1 hover:text-yellow-300 text-sm md:text-base text-white",
                                                children: ["View All Plans ", (0, ek.jsx)(tC.A, {})]
                                            })
                                        })]
                                    })]
                                })
                            })]
                        })
                    })
                }) : null
            }

            function tq(e) {
                let {
                    open: t,
                    setOpen: r
                } = e;
                return t ? (0, ek.jsx)(tN.Lt, {
                    open: t,
                    onOpenChange: r,
                    children: (0, ek.jsxs)(tN.EO, {
                        children: [(0, ek.jsxs)(tN.wd, {
                            className: "flex items-center justify-center",
                            children: [(0, ek.jsx)(tN.r7, {
                                children: "No More Data"
                            }), (0, ek.jsx)(tN.$v, {
                                children: "There is no more available data, please wait till tomorrow to continue this session."
                            })]
                        }), (0, ek.jsx)(tN.ck, {
                            children: (0, ek.jsx)(tN.Rx, {
                                onClick: () => {
                                    r(!1)
                                },
                                children: "OK"
                            })
                        })]
                    })
                }) : null
            }
            var tJ = r(33144);
            let tZ = {
                    async getAllCharts() {
                        let e = await fetch("/api/charts");
                        return e.ok ? e.json() : []
                    },
                    async removeChart(e) {
                        await fetch("/api/charts/".concat(e), {
                            method: "DELETE"
                        })
                    },
                    async saveChart(e) {
                        let t = await fetch("/api/charts", {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json"
                            },
                            body: JSON.stringify(e)
                        });
                        return (await t.json()).id
                    },
                    async getChartContent(e) {
                        let t = await fetch("/api/charts/".concat(e));
                        return t.ok ? (await t.json()).content : ""
                    },
                    getAllStudyTemplates: async () => [],
                    removeStudyTemplate: async () => {},
                    saveStudyTemplate: async () => {},
                    getStudyTemplateContent: async () => "",
                    getDrawingTemplates: async () => [],
                    loadDrawingTemplate: async () => "",
                    removeDrawingTemplate: async () => {},
                    saveDrawingTemplate: async () => {},
                    getChartTemplateContent: async () => ({}),
                    getAllChartTemplates: async () => [],
                    saveChartTemplate: async () => {},
                    removeChartTemplate: async () => {},
                    saveLineToolsAndGroups: async () => {},
                    loadLineToolsAndGroups: async () => null
                },
                tK = e => {
                    let {
                        session: t,
                        setSession: r,
                        trades: i,
                        setTrades: a,
                        barsData: n,
                        tags: o,
                        setTags: s,
                        notes: l,
                        setNotes: c,
                        currentBalance: d,
                        setCurrentBalance: u,
                        setCurrentDate: h
                    } = e, {
                        timezone: p,
                        goToTimes: g,
                        sessionTimes: m,
                        setGoToTimes: f,
                        subscriptionType: y
                    } = (0, e$.J)(), {
                        resolvedTheme: C
                    } = (0, e1.D)(), {
                        registerHandlers: b
                    } = (0, tR.u)(), S = (0, eI.useRef)(null), T = (0, eI.useRef)(null), v = (0, eI.useRef)({}), w = (0, eI.useRef)({}), P = (0, eI.useRef)(i), _ = (0, eI.useRef)(0), x = (0, eI.useRef)(0), L = (0, eI.useRef)(null);
                    (0, eI.useEffect)(() => {
                        P.current = i
                    }, [i]);
                    let A = (0, eI.useCallback)(async () => T.current ? new Promise(e => {
                            let t = T.current,
                                r = i => {
                                    t.unsubscribe("onScreenshotReady", r), console.log("Screenshot URL:", i), e(i)
                                };
                            t.onChartReady(() => {
                                t.subscribe("onScreenshotReady", r), t.takeScreenshot()
                            })
                        }) : null, []),
                        k = (e, t) => {
                            v.current[e] = t
                        },
                        I = e => {
                            var t, r, i, a;
                            let n = v.current[e];
                            n && (null == (t = n.entryLine) || t.remove(), null == (r = n.stopLossLine) || r.remove(), null == (i = n.takeProfitLine) || i.remove(), null == (a = n.partialLines) || a.forEach(e => e.remove()), delete v.current[e])
                        },
                        j = async e => {
                            if (!T.current) return;
                            let {
                                stopLoss: t,
                                takeProfit: r,
                                entryPrice: i,
                                startDate: a,
                                endDate: n,
                                tradeType: o,
                                id: s,
                                pair: l
                            } = e;
                            if (!a || !n) return;
                            let c = new Date(a).getTime() / 1e3,
                                d = new Date(n).getTime() / 1e3,
                                u = T.current.activeChart().createMultipointShape([{
                                    time: c,
                                    price: i
                                }, {
                                    time: d,
                                    price: i
                                }], {
                                    shape: "buy" === o ? "long_position" : "short_position"
                                });
                            if (!u) return;
                            let h = T.current.activeChart().getShapeById(u),
                                p = eV.Iq.find(e => e.symbol === l),
                                g = p ? Math.log10(p.pricescale) : 0,
                                m = "buy" === o ? i - t : t - i,
                                f = "buy" === o ? r - i : i - r,
                                y = parseFloat((m * Math.pow(10, g)).toFixed(g)),
                                C = parseFloat((f * Math.pow(10, g)).toFixed(g));
                            h.setProperties({
                                stopLevel: y,
                                profitLevel: C,
                                frozen: !0
                            }), w.current[s] = u
                        }, R = async e => {
                            if (!T.current) return;
                            let t = w.current[e.id];
                            if (t) try {
                                T.current.activeChart().removeEntity(t), delete w.current[e.id]
                            } catch (e) {
                                console.error("Error removing shape:", t, e)
                            }
                        }, N = (e, t, r) => {
                            if (!T.current) return;
                            let i = v.current[e.id];
                            if (!i) return;
                            let a = T.current.activeChart().createOrderLine();
                            a.setPrice(t), a.setText("Partial:".concat(t)), a.setQuantity("".concat((r / e.quantity * 100).toFixed(2), "%")), a.setLineStyle(0), a.setLineColor("orange"), i.partialLines.push(a)
                        }, [D, O] = (0, eI.useState)(!1), [E, F] = (0, eI.useState)(!1), [M, V] = (0, eI.useState)(!1), [B, W] = (0, eI.useState)(!1), [U, z] = (0, eI.useState)(!1), [G, H] = (0, eI.useState)(!1), [Y, q] = (0, eI.useState)(!1), [J, Z] = (0, eI.useState)(!1), [K, Q] = (0, eI.useState)(!1), [$, X] = (0, eI.useState)({
                            primary: "",
                            secondary: "",
                            gif: "go-to"
                        }), ee = (0, eI.useRef)(0), et = (0, eI.useRef)(0), er = (0, eI.useRef)(0), [ei, ea] = (0, eI.useState)(null), [en, eo] = (0, eI.useState)(15), [es, el] = (0, eI.useState)(g), [ec, ed] = (0, eI.useState)(!1), [eu, eh] = (0, eI.useState)(""), [ep, eg] = (0, eI.useState)(!0), em = (0, eI.useRef)(void 0), [ef, ey] = (0, eI.useState)({
                            pair: t.pairs[0] || "",
                            quantity: 0,
                            tradeType: "buy",
                            executionType: "market",
                            status: "pending",
                            entryPrice: 0,
                            takeProfit: 0,
                            stopLoss: 0,
                            initialTakeProfit: 0,
                            initialStopLoss: 0,
                            currentPrice: 0,
                            partials: [],
                            tags: [],
                            currentDate: t.backtestCurrentDate,
                            noteTitle: "",
                            noteBody: ""
                        }), [eC, eb] = (0, eI.useState)({
                            balanceType: "initial",
                            riskPercentage: 1,
                            riskAmount: .01 * t.startingBalance
                        }), [eS, eT] = (0, eI.useState)(!1), [ev, ew] = (0, eI.useState)(!1), eP = (0, eI.useRef)(null), e_ = (0, eI.useCallback)(e => {
                            eP.current && clearTimeout(eP.current), eP.current = setTimeout(() => {
                                eG(), eT(!0)
                            }, e)
                        }, []), ex = function(e) {
                            let t = !(arguments.length > 1) || void 0 === arguments[1] || arguments[1];
                            return eh(e), eg(t), ed(!0), new Promise(e => {
                                em.current = e
                            })
                        }, eL = (0, eI.useRef)(es);
                    (0, eI.useEffect)(() => {
                        eL.current = es
                    }, [es]), (0, eI.useEffect)(() => {
                        if ("free" === y) return e_(18e4), () => {
                            eP.current && clearTimeout(eP.current)
                        }
                    }, [y, e_]);
                    let eA = (0, eI.useCallback)(() => {
                            eT(!1), e_(72e4)
                        }, [e_]),
                        eN = (0, eI.useMemo)(() => (function(e, t, r) {
                            let i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {},
                                {
                                    onFetchStart: a,
                                    onFetchEnd: n,
                                    onNoData: o
                                } = i,
                                s = Math.floor(new Date(t.backtestCurrentDate).getTime() / 1e3),
                                l = {
                                    ON: !1,
                                    SPEED: 1e3,
                                    STEP_SIZE: 1,
                                    SYNC: !1,
                                    SYNC_COUNT: 0
                                },
                                c = {
                                    subscriberUID: null,
                                    symbol: null,
                                    onRealtimeCallback: null,
                                    onResetCacheNeededCallback: null
                                },
                                d = null,
                                u = 15,
                                h = null,
                                p = null,
                                g = {},
                                m = {},
                                f = {},
                                y = {},
                                C = Array.from({
                                    length: 30
                                }, (e, t) => (t + 1).toString());
                            C.push("45");
                            let b = [...C, ...Array.from({
                                    length: 12
                                }, (e, t) => t + 1 + "H"), "D", "W", "M"],
                                S = {
                                    supported_resolutions: ["1", "2", "3", "5", "10", "15", "30", "1H", "2H", "3H", "4H", "D", "W", "M"],
                                    exchanges: [{
                                        value: "Traders Casa",
                                        name: "Traders Casa",
                                        desc: "Traders Casa"
                                    }],
                                    symbols_types: [{
                                        name: "All",
                                        value: "All"
                                    }, {
                                        name: "Forex",
                                        value: "forex"
                                    }, {
                                        name: "Indicies",
                                        value: "indicies"
                                    }, {
                                        name: "Futures",
                                        value: "futures"
                                    }, {
                                        name: "Stocks",
                                        value: "stocks"
                                    }]
                                };

                            function T(e) {
                                for (let t = 1; t < e.length; t++) e[t].open = e[t - 1].close;
                                return e
                            }

                            function v(e) {
                                let t = new Set,
                                    r = [];
                                for (let i of e) t.has(i.time) || (t.add(i.time), r.push(i));
                                return r.sort((e, t) => e.time - t.time)
                            }

                            function w(e) {
                                return "D" === e || "1D" === e ? 86400 : "W" === e || "1W" === e ? 604800 : "M" === e || "1M" === e ? 2592e3 : e.endsWith("H") ? 3600 * parseInt(e) : 60 * parseInt(e)
                            }

                            function P(e, t) {
                                let r = new Date(e);
                                if (86400 === t) return r.setUTCHours(0, 0, 0, 0), r.getTime();
                                if (604800 === t) {
                                    let e = r.getUTCDay();
                                    return r.setUTCDate(r.getUTCDate() + (0 === e ? -6 : 1 - e)), r.setUTCHours(0, 0, 0, 0), r.getTime()
                                }
                                return 2592e3 === t ? (r.setUTCDate(1), r.setUTCHours(0, 0, 0, 0), r.getTime()) : Math.floor(e / 1e3 / t) * t * 1e3
                            }

                            function _(e, t) {
                                if (86400 === t) return e + 864e5;
                                if (604800 === t) return e + 6048e5;
                                if (2592e3 === t) {
                                    let t = new Date(e);
                                    return t.setUTCMonth(t.getUTCMonth() + 1), t.getTime()
                                }
                                return e + 1e3 * t
                            }

                            function x(e, t) {
                                let r, i, a, n, o, s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : Math.floor(Date.now() / 1e3);
                                if (!e.length) return [];
                                if (86400 === t) return e;
                                let l = [],
                                    c = P(e[0].time, t),
                                    d = _(c, t);
                                for (let u of e) {
                                    let e = Math.floor(u.time / 1e3);
                                    if (e > s) break;
                                    for (; e >= d / 1e3;) void 0 !== r && (l.push({
                                        time: c,
                                        open: r,
                                        high: i,
                                        low: a,
                                        close: n,
                                        volume: o
                                    }), r = i = a = n = o = void 0), d = _(c = d, t);
                                    void 0 === r ? (r = u.open, i = u.high, a = u.low, n = u.close, o = u.volume || 0) : (i = Math.max(i, u.high), a = Math.min(a, u.low), n = u.close, o += u.volume || 0)
                                }
                                return void 0 !== r && l.push({
                                    time: c,
                                    open: r,
                                    high: i,
                                    low: a,
                                    close: n,
                                    volume: o
                                }), l
                            }

                            function L(t, r) {
                                var i, a, n, o;
                                let s = w(r),
                                    l = (null == (i = e[t]) ? void 0 : i["1"]) || [],
                                    c = ((null == (a = e[t]) ? void 0 : a.D) || []).map(e => ({
                                        ...e
                                    })),
                                    d = e => {
                                        let t = new Date(e);
                                        return t.setUTCHours(0, 0, 0, 0), t.getTime()
                                    };
                                if (s < 86400) {
                                    let i = Math.floor(Date.now() / 1e3),
                                        a = ((null == (n = e[t]) ? void 0 : n[r]) || []).map(e => ({
                                            ...e
                                        })),
                                        c = l.length ? x(l, s, i) : [],
                                        d = [];
                                    if (s >= 3600) {
                                        let r = (null == (o = e[t]) ? void 0 : o["60"]) || [];
                                        d = r.length ? x(r, s, i) : []
                                    }
                                    return T(function(e) {
                                        let t = new Map;
                                        for (let r of e)
                                            for (let e of r) t.set(e.time, e);
                                        return Array.from(t.values()).sort((e, t) => e.time - t.time)
                                    }([d, a, c]))
                                }
                                let u = c.length ? c[c.length - 1] : null,
                                    h = u ? d(u.time) + 864e5 : l.length ? d(l[0].time) : null,
                                    p = l.length ? l[l.length - 1].time : null,
                                    g = [...c, ...null != h && null != p ? ((e, t, r) => {
                                        if (!e.length) return [];
                                        let i = [],
                                            a = null,
                                            n, o, s, l, c = 0;
                                        for (let u = 0; u < e.length; u++) {
                                            let h = e[u];
                                            if (null != t && h.time < t) continue;
                                            if (null != r && h.time >= r) break;
                                            let p = d(h.time);
                                            if (null === a) {
                                                a = p, n = h.open, o = h.high, s = h.low, l = h.close, c = h.volume || 0;
                                                continue
                                            }
                                            if (p !== a) {
                                                i.push({
                                                    time: a,
                                                    open: n,
                                                    high: o,
                                                    low: s,
                                                    close: l,
                                                    volume: c
                                                }), a = p, n = h.open, o = h.high, s = h.low, l = h.close, c = h.volume || 0;
                                                continue
                                            }
                                            h.high > o && (o = h.high), h.low < s && (s = h.low), l = h.close, c += h.volume || 0
                                        }
                                        return null !== a && i.push({
                                            time: a,
                                            open: n,
                                            high: o,
                                            low: s,
                                            close: l,
                                            volume: c
                                        }), i
                                    })(l, h, p + 1) : []];
                                if (86400 === s) return g.map(e => ({
                                    ...e
                                }));
                                let m = p ? Math.floor(p / 1e3) : g.length ? Math.floor((g[g.length - 1].time + 864e5) / 1e3) : Math.floor(Date.now() / 1e3);
                                return x(g, s, m).map(e => ({
                                    ...e
                                }))
                            }
                            let A = async (t, r, i, a) => {
                                let n = Math.min(a, s),
                                    o = Math.min(i, n),
                                    l = await (0, eB.n)({
                                        symbol: t,
                                        resolution: r,
                                        from: o,
                                        to: n
                                    });
                                return e[t] || (e[t] = {}), e[t][r] || (e[t][r] = []), e[t][r].push(...l), l
                            };
                            async function k(t) {
                                var r, i, o;
                                if (g[t]) return;
                                let l = null == (r = e[t]) ? void 0 : r.playback,
                                    c = null == (i = e[t]) ? void 0 : i["1"];
                                if ((!l || 0 === l.length) && c && c.length && (l = [c[c.length - 1]]), !l || 0 === l.length) return;
                                let d = l[0].time,
                                    u = l[l.length - 1].time,
                                    h = u - d;
                                if (h >= 12096e5) return;
                                let p = Math.floor(u / 1e3) + 1,
                                    C = p + 604800;
                                if (C <= p) return;
                                let b = h <= 1728e5;
                                g[t] = !0, b && a && a(t);
                                try {
                                    let r = await (0, eB.n)({
                                            symbol: t,
                                            resolution: "1",
                                            from: p,
                                            to: C
                                        }),
                                        i = (null == (o = e[t]) ? void 0 : o.playback) || [],
                                        a = new Set(i.map(e => e.time)),
                                        n = 1e3 * s,
                                        l = r.filter(e => e.time > n && !a.has(e.time));
                                    l.length ? (e[t] || (e[t] = {}), e[t].playback || (e[t].playback = []), e[t].playback.push(...l), e[t].playback.sort((e, t) => e.time - t.time), m[t] = !1, f[t] = !1) : Math.floor(Date.now() / 1e3) - s <= 345600 && (m[t] = !0)
                                } catch (e) {
                                    console.error("fetchMoreData error", e)
                                } finally {
                                    g[t] = !1, b && n && n(t), y[t] = !0
                                }
                            }

                            function I(t) {
                                var r;
                                let i = (null == (r = e[t]) ? void 0 : r.playback) || [];
                                m[t] && !f[t] && 0 === i.length && (o && o(t), f[t] = !0)
                            }

                            function j(t, r, i) {
                                var a, n, o;
                                let {
                                    resolution: d
                                } = c, u = w(d), h = null == (a = e[t]) ? void 0 : a.playback;
                                e[t]["1"] || (e[t]["1"] = []);
                                let g = e[t]["1"];
                                if (e[t]._lastEmitted || (e[t]._lastEmitted = {}), !(null == h ? void 0 : h.length)) {
                                    k(t), I(t);
                                    return
                                }
                                let m = r;
                                u < 86400 && l.SYNC && (l.SYNC_COUNT > 0 ? (m = l.SYNC_COUNT, l.SYNC_COUNT = 0) : m = l.STEP_SIZE);
                                for (let e = 0; e < m && h.length; e++) {
                                    let e = h.shift(),
                                        r = g[g.length - 1];
                                    r && e.time <= r.time || (g.push(e), u < 86400 && (i(e), p && p(e, t)), s = Math.floor(e.time / 1e3))
                                }
                                let f = g[g.length - 1];
                                if (!f) {
                                    k(t), I(t);
                                    return
                                }
                                let y = f.time,
                                    C = Math.floor(y / 1e3),
                                    b = e => {
                                        let t = new Date(e);
                                        return t.setUTCHours(0, 0, 0, 0), t.getTime()
                                    },
                                    S = (e, t) => e + 86400 * t * 1e3,
                                    T = (e, t) => {
                                        let r = g.filter(r => r.time >= e && r.time < t);
                                        if (!r.length) return null;
                                        let i = r[0].open,
                                            a = r[r.length - 1].close,
                                            n = r[0].high,
                                            o = r[0].low,
                                            s = 0;
                                        for (let e = 0; e < r.length; e++) r[e].high > n && (n = r[e].high), r[e].low < o && (o = r[e].low), s += r[e].volume || 0;
                                        return {
                                            time: e,
                                            open: i,
                                            high: n,
                                            low: o,
                                            close: a,
                                            volume: s
                                        }
                                    };
                                if (86400 === u) {
                                    let r = (null == (n = e[t]) ? void 0 : n.D) || [],
                                        a = r.length ? r[r.length - 1] : null,
                                        o = a ? S(b(a.time), 1) : b(g[0].time),
                                        l = Math.max(o, e[t]._lastEmitted.D || o);
                                    for (; l < b(y);) {
                                        let e = T(l, S(l, 1));
                                        e && (i(e), p && p(e, t)), l = S(l, 1)
                                    }
                                    let c = b(y),
                                        d = T(c, y + 1);
                                    d && (i(d), p && p(d, t)), e[t]._lastEmitted.D = c, s = C, k(t), I(t);
                                    return
                                }
                                if (604800 === u || 2592e3 === u) {
                                    let r = (null == (o = e[t]) ? void 0 : o.D) || [],
                                        a = b(y),
                                        n = T(a, y + 1),
                                        l = P(y, u),
                                        c = _(l, u),
                                        d = r.filter(e => e.time >= l && e.time < a),
                                        h = n ? [...d, {
                                            ...n,
                                            time: a
                                        }] : d;
                                    if (h.length) {
                                        let e = h[0].open,
                                            r = h[h.length - 1].close,
                                            a = h[0].high,
                                            n = h[0].low,
                                            o = 0;
                                        for (let e = 0; e < h.length; e++) h[e].high > a && (a = h[e].high), h[e].low < n && (n = h[e].low), o += h[e].volume || 0;
                                        let s = {
                                            time: l,
                                            open: e,
                                            high: a,
                                            low: n,
                                            close: r,
                                            volume: o
                                        };
                                        i(s), p && p(s, t)
                                    } else {
                                        let e = (e => {
                                            if (!e.length) return null;
                                            let t = e[0].open,
                                                r = e[e.length - 1].close,
                                                i = e[0].high,
                                                a = e[0].low,
                                                n = 0;
                                            for (let t = 0; t < e.length; t++) e[t].high > i && (i = e[t].high), e[t].low < a && (a = e[t].low), n += e[t].volume || 0;
                                            return {
                                                time: e[0].time,
                                                open: t,
                                                high: i,
                                                low: a,
                                                volume: n,
                                                close: r
                                            }
                                        })(r.filter(e => e.time >= l && e.time < c));
                                        e && (e.time = l, i(e), p && p(e, t))
                                    }
                                    s = C, k(t), I(t);
                                    return
                                }
                                k(t), I(t)
                            }

                            function R() {
                                let {
                                    symbol: t,
                                    onRealtimeCallback: r
                                } = c;
                                t && r && (clearInterval(d), d = setInterval(() => {
                                    var i, a;
                                    if (!l.ON) return void clearInterval(d);
                                    j(t, l.STEP_SIZE, r), (null == (a = e[t]) || null == (i = a.playback) ? void 0 : i.length) || (l.ON = !1, clearInterval(d))
                                }, l.SPEED))
                            }
                            let N = (t, r, i) => {
                                var a;
                                let n = null == (a = e[t]) ? void 0 : a.playback;
                                if (!n || 0 === n.length) return void console.log("[goToTime]: No data for symbol ".concat(t));
                                let [o, l] = r.split(":").map(Number), c = !1;
                                for (; n.length > 0;) {
                                    let r = n[0],
                                        a = new Date(r.time);
                                    if (a.getUTCHours() === o && a.getUTCMinutes() === l) {
                                        c = !0;
                                        break
                                    }
                                    n.shift(), e[t]["1"] || (e[t]["1"] = []), e[t]["1"].push(r), i(r), p && p(r, t), s = Math.floor(r.time / 1e3)
                                }
                                c || console.log("[goToTime]: No bar found at the specified time ".concat(r)), k(t), I(t)
                            };
                            return {
                                onReady: e => {
                                    setTimeout(() => e(S))
                                },
                                searchSymbols: async (e, t, r, i) => {
                                    i((await getAllSymbols()).filter(r => {
                                        let i = "" === t || r.exchange === t,
                                            a = "".concat(r.exchange, ":").concat(r.ticker);
                                        return i && a.toLowerCase().includes(e.toLowerCase())
                                    }))
                                },
                                resolveSymbol: async (e, t, i) => {
                                    let a = eV.Iq.find(t => {
                                        let {
                                            symbol: r
                                        } = t;
                                        return r === e
                                    });
                                    if (!a) return void i("Cannot resolve symbol");
                                    let n = {
                                        ticker: a.ticker,
                                        name: a.symbol,
                                        description: a.description,
                                        type: a.type,
                                        session: a.session,
                                        timezone: r,
                                        exchange: a.exchange,
                                        minmov: 1,
                                        pricescale: a.pricescale,
                                        visible_plots_set: "ohlc",
                                        has_intraday: !0,
                                        has_weekly_and_monthly: !0,
                                        supported_resolutions: b,
                                        volume_precision: 2,
                                        data_status: "streaming"
                                    };
                                    setTimeout(() => t(n), 0)
                                },
                                getBars: async (e, t, r, i) => {
                                    let {
                                        from: a,
                                        to: n,
                                        firstDataRequest: o
                                    } = r;
                                    if ("M" === t || "1M" === t) return void(o ? i(T(L(e.ticker, t)), {
                                        noData: !1
                                    }) : i([], {
                                        noData: !0
                                    }));
                                    if (o) {
                                        let r = L(e.ticker, t);
                                        if (0 === r.length) {
                                            let i = s - 345600;
                                            r = await A(e.ticker, t, i, s)
                                        }
                                        i(r, {
                                            noData: !1
                                        })
                                    } else i(await A(e.ticker, t, a, n), {
                                        noData: !1
                                    })
                                },
                                subscribeBars: (e, t, r, i, a) => {
                                    h = e, c = {
                                        subscriberUID: i,
                                        symbol: e.ticker,
                                        onRealtimeCallback: r,
                                        resolution: t,
                                        onResetCacheNeededCallback: a
                                    }
                                },
                                unsubscribeBars: () => {
                                    l.ON = !1, clearInterval(d)
                                },
                                intervalChange: e => {
                                    c.onResetCacheNeededCallback(), u = e, l.SYNC = !1
                                },
                                bar_replay_start: () => {
                                    l.ON = !0, R()
                                },
                                bar_replay_stop: () => {
                                    l.ON = !1, R()
                                },
                                bar_replay_step: () => {
                                    let {
                                        symbol: e,
                                        onRealtimeCallback: t
                                    } = c;
                                    e && t && j(e, l.STEP_SIZE, t)
                                },
                                bar_replay_speed: e => {
                                    l.SPEED = 1e3 / e, R()
                                },
                                bar_replay_step_size: e => {
                                    l.STEP_SIZE = e, R()
                                },
                                bar_replay_sync: e => {
                                    if (l.SYNC = !!e, l.SYNC) {
                                        l.STEP_SIZE = u;
                                        let e = w(c.resolution),
                                            t = e - s % e;
                                        t === e && (t = 0), t >= 60 && (t -= 60), l.SYNC_COUNT = t / 60
                                    }
                                },
                                go_to_time: e => {
                                    let {
                                        symbol: t,
                                        onRealtimeCallback: r
                                    } = c;
                                    N(t, e, r)
                                },
                                getLatestMinuteBar: function() {
                                    var t;
                                    let r = null == h ? void 0 : h.ticker,
                                        i = r && (null == (t = e[r]) ? void 0 : t["1"]) || [];
                                    return i.length ? i[i.length - 1] : null
                                },
                                getCurrentSymbol: function() {
                                    var e;
                                    return null != (e = null == h ? void 0 : h.ticker) ? e : null
                                },
                                getMaxPotentialProfit: (t, r, i, a, n, o) => {
                                    var s, l;
                                    let c = e => "number" == typeof e ? e : new Date(e).getTime(),
                                        d = c(r),
                                        u = c(i);
                                    if (isNaN(d) || isNaN(u)) return null;
                                    let h = [...(null == (s = e[t]) ? void 0 : s["1"]) || [], ...(null == (l = e[t]) ? void 0 : l.playback) || []].filter(e => e.time >= d && e.time <= u).sort((e, t) => e.time - t.time);
                                    if (!h.length) return null;
                                    let p = null;
                                    for (let e of h)
                                        if ("buy" === a) {
                                            if (p = null == p ? e.high : Math.max(p, e.high), e.low <= o) break
                                        } else if (p = null == p ? e.low : Math.min(p, e.low), e.high >= o) break;
                                    return null == p ? n : p
                                },
                                getMaxDrawdown: (t, r, i, a) => {
                                    var n;
                                    let o = e => "number" == typeof e ? e : new Date(e).getTime(),
                                        s = o(r),
                                        l = o(i);
                                    if (isNaN(s) || isNaN(l)) return null;
                                    let c = ((null == (n = e[t]) ? void 0 : n["1"]) || []).filter(e => e.time >= s && e.time <= l);
                                    return c.length ? "buy" === a ? Math.min(...c.map(e => e.low)) : Math.max(...c.map(e => e.high)) : null
                                },
                                setOnNewBarCallback: e => {
                                    p = e
                                },
                                rewind: async t => {
                                    var r;
                                    let {
                                        symbol: i
                                    } = c;
                                    if (!i) return !1;
                                    let a = "number" == typeof t ? Math.floor(t) : Math.floor(new Date(t).getTime() / 1e3),
                                        n = Math.floor(Date.now() / 1e3),
                                        o = ((null == (r = e[i]) ? void 0 : r["1"]) || []).slice().sort((e, t) => e.time - t.time),
                                        l = o.some(e => Math.floor(e.time / 1e3) < a),
                                        d = o.some(e => Math.floor(e.time / 1e3) >= a);
                                    if (l && d) {
                                        let t = o.filter(e => Math.floor(e.time / 1e3) < a),
                                            r = o.filter(e => Math.floor(e.time / 1e3) >= a);
                                        e[i]["1"] = v(t), e[i].playback = v(r)
                                    } else try {
                                        let t = a - 345600,
                                            r = Math.min(a + 259200, n),
                                            o = await (0, eB.n)({
                                                symbol: i,
                                                resolution: "1",
                                                from: t,
                                                to: r
                                            }),
                                            s = o.filter(e => e.time / 1e3 < a),
                                            l = o.filter(e => e.time / 1e3 >= a);
                                        s = v(s), l = v(l);
                                        let c = a - 5184e3,
                                            d = a - 94608e3,
                                            u = await (0, eB.n)({
                                                symbol: i,
                                                resolution: "60",
                                                from: c,
                                                to: a
                                            }),
                                            h = await (0, eB.n)({
                                                symbol: i,
                                                resolution: "1D",
                                                from: d,
                                                to: a
                                            });
                                        u = v(u), h = v(h), e[i] = {
                                            1: s,
                                            60: u,
                                            D: h,
                                            playback: l
                                        }
                                    } catch (e) {
                                        return console.error("rewind fetch error", e), !1
                                    }
                                    return s = a, c.onResetCacheNeededCallback && c.onResetCacheNeededCallback(), m[i] = !1, f[i] = !1, k(i), I(i), !0
                                }
                            }
                        })(n, t, p, {
                            onFetchStart: () => V(!0),
                            onFetchEnd: () => V(!1),
                            onNoData: () => ew(!0)
                        }), []),
                        eD = async e => {
                            var i;
                            let a = (e || P.current).filter(e => "closed" === e.status),
                                n = a.reduce((e, t) => e + (t.profitLoss || 0), 0),
                                o = t.startingBalance + n,
                                s = a.filter(e => {
                                    var t;
                                    return (null != (t = e.profitLoss) ? t : 0) > 0
                                }).length,
                                l = a.length ? s / a.length * 100 : 0,
                                c = null == (i = eN.getLatestMinuteBar()) ? void 0 : i.time,
                                d = c ? new Date(c) : t.backtestCurrentDate;
                            h(d.toISOString().slice(0, 10)), u(o), r(e => ({
                                ...e,
                                currentBalance: o,
                                winRate: l,
                                backtestCurrentDate: d
                            })), await (0, e2.o)(t.id, {
                                currentBalance: o,
                                winRate: l,
                                backtestCurrentDate: d
                            })
                        }, eO = (0, eI.useRef)(0), eE = (0, eI.useRef)(null), eM = (0, eI.useRef)(!1), eW = (0, eI.useRef)(!1), eU = (0, eI.useCallback)(async e => {
                            eE.current && (clearTimeout(eE.current), eE.current = null), eM.current = !1, await eD(e), eO.current = Date.now()
                        }, []), ez = (0, eI.useCallback)(e => {
                            eM.current = !0, Date.now() - eO.current >= 3e4 && !eW.current ? (eW.current = !0, Promise.resolve(eD(e)).finally(() => {
                                eW.current = !1, eM.current = !1, eO.current = Date.now()
                            })) : (eE.current && clearTimeout(eE.current), eE.current = setTimeout(() => {
                                eM.current && !eW.current && (eW.current = !0, Promise.resolve(eD()).finally(() => {
                                    eW.current = !1, eM.current = !1, eO.current = Date.now(), eE.current = null
                                }))
                            }, 12e4))
                        }, []);
                    (0, eI.useEffect)(() => () => {
                        eE.current && clearTimeout(eE.current)
                    }, []);
                    let eG = () => {
                            eN.bar_replay_stop(), eU(), O(!1)
                        },
                        eH = (0, eI.useCallback)(e => {
                            let t = "basic" === y || "ad-free" === y;
                            if ("free" === y) {
                                X({
                                    primary: "Skip Ahead To Your Session With Pro",
                                    secondary: "",
                                    gif: "go-to"
                                }), Q(!0);
                                return
                            }
                            if (t) {
                                if (et.current >= 4) {
                                    X({
                                        primary: "Skip Ahead To Your Session With Pro",
                                        secondary: "*Limited to 4 uses per session in Basic",
                                        gif: "go-to"
                                    }), Q(!0);
                                    return
                                }
                                et.current++
                            }
                            let r = eL.current[({
                                london: "london",
                                ny: "newYork",
                                tokyo: "tokyo",
                                custom: "custom"
                            })[e]];
                            r && eN.go_to_time(r)
                        }, [eN, y]);

                    function eY(e) {
                        var r, i, a, n, o, s;
                        let l, c = e.chart(),
                            d = c.selection().allSources(),
                            u = () => {
                                var e, t, r, i;
                                return ey({
                                    ...ef,
                                    entryPrice: null != (i = null == (e = eN.getLatestMinuteBar()) ? void 0 : e.close) ? i : 0,
                                    stopLoss: 0,
                                    takeProfit: 0,
                                    tradeType: "buy",
                                    executionType: "market",
                                    currentDate: new Date(null == (t = eN.getLatestMinuteBar()) ? void 0 : t.time),
                                    currentPrice: null == (r = eN.getLatestMinuteBar()) ? void 0 : r.close
                                })
                            };
                        if (1 !== d.length) return u();
                        try {
                            l = c.getShapeById(d[0])
                        } catch (e) {
                            return u()
                        }
                        if (!l) return u();
                        let {
                            toolname: h
                        } = l._source, p = l.getProperties(), g = l.getPoints()[0].price, m = null != (n = null == (r = eN.getLatestMinuteBar()) ? void 0 : r.close) ? n : 0, f = null != (o = eN.getCurrentSymbol()) ? o : t.pairs[0], y = eV.Iq.find(e => e.symbol === f), C = null != (s = null == y ? void 0 : y.pricescale) ? s : 1, b = Math.log10(C) || 0, S = Math.round(g * C), T = p.stopLevel, v = p.profitLevel, w = "LineToolRiskRewardLong" === h;
                        if (!w && "LineToolRiskRewardShort" !== h) return u();
                        let P = w ? 1 : -1,
                            _ = e => parseFloat((e / C).toFixed(b)),
                            x = _(S),
                            L = _(S - P * T),
                            A = _(S + P * v);
                        ey({
                            ...ef,
                            pair: f,
                            entryPrice: x,
                            stopLoss: L,
                            takeProfit: A,
                            tradeType: w ? "buy" : "sell",
                            executionType: x === m ? "market" : w ? x > m ? "stop" : "limit" : x < m ? "stop" : "limit",
                            currentDate: new Date(null == (i = eN.getLatestMinuteBar()) ? void 0 : i.time),
                            currentPrice: null == (a = eN.getLatestMinuteBar()) ? void 0 : a.close
                        })
                    }
                    let eq = (e, t, r, i) => {
                            let a = (e - t) * r;
                            return "sell" === i && (a = -a), a.toFixed(2)
                        },
                        eJ = (e, t, r, i, a) => {
                            let n = r,
                                o = 0;
                            if (a && a.length > 0)
                                for (let e of a) "closed" === e.status && (o += (e.price - t) * e.amount, n -= e.amount);
                            return o += (e - t) * n, "sell" === i && (o = -o), o.toFixed(2)
                        },
                        eZ = async e => {
                            var t;
                            if (!T.current) return;
                            let {
                                tradeType: r,
                                quantity: i,
                                id: n
                            } = e, o = e.entryPrice, s = e.stopLoss, l = e.takeProfit, c = o, d = s, u = l, h = T.current.activeChart(), p = h.createOrderLine(), g = h.createOrderLine(), m = h.createOrderLine(), f = [], y = () => f.map(e => e.line.getPrice()), C = () => {
                                let e = g.getPrice(),
                                    t = m.getPrice();
                                return "buy" === r ? {
                                    min: e,
                                    max: t
                                } : {
                                    min: t,
                                    max: e
                                }
                            }, b = e => {
                                let t = y();
                                return !t.length || ("buy" === r ? e >= Math.max(...t) : e <= Math.min(...t))
                            }, S = e => {
                                let t = y();
                                return !t.length || ("buy" === r ? e <= Math.min(...t) : e >= Math.max(...t))
                            }, v = async () => {
                                p.remove(), g.remove(), m.remove(), f.forEach(e => e.line.remove()), eD(), await (0, e5.G)(n, {
                                    status: "missed"
                                }), P.current = P.current.map(e => e.id === n ? {
                                    ...e,
                                    status: "missed"
                                } : e), a(e => e.map(e => e.id === n ? {
                                    ...e,
                                    status: "missed"
                                } : e))
                            };
                            p.setPrice(o), p.setText("Entry: ".concat(o)), p.setLineStyle(2), p.setQuantity(""), p.onMove(async () => {
                                let e = p.getPrice();
                                if ("buy" === r && e < s || "sell" === r && e > s) return void p.setPrice(c);
                                o = e, c = e, p.setText("Entry: ".concat(e));
                                let t = eq(s, e, i, r),
                                    d = eq(l, e, i, r);
                                g.setQuantity((0, tL.vv)(parseFloat(t))), m.setQuantity((0, tL.vv)(parseFloat(d))), eD(), await (0, e5.G)(n, {
                                    entryPrice: e
                                }), P.current = P.current.map(t => t.id === n ? {
                                    ...t,
                                    entryPrice: e
                                } : t), a(t => t.map(t => t.id === n ? {
                                    ...t,
                                    entryPrice: e
                                } : t)), p.setPrice(e)
                            }), p.onCancel(v), g.setPrice(s), g.setText("SL: ".concat(s)), g.setLineStyle(2), g.setLineColor("red"), g.setQuantity((0, tL.vv)(parseFloat(eq(s, o, i, r)))), g.onMove(async () => {
                                let e = g.getPrice(),
                                    t = "sell" === r && (e < l || e < o) || "buy" === r && (e > l || e > o),
                                    c = !S(e);
                                if (t || c) return void g.setPrice(d);
                                s = e, d = e, g.setText("SL: ".concat(e));
                                let u = eq(e, o, i, r);
                                g.setQuantity((0, tL.vv)(parseFloat(u))), console.log("Updated trade:", await (0, e5.G)(n, {
                                    stopLoss: e
                                })), P.current = P.current.map(t => t.id === n ? {
                                    ...t,
                                    stopLoss: e
                                } : t), a(t => t.map(t => t.id === n ? {
                                    ...t,
                                    stopLoss: e
                                } : t)), eD(), g.setPrice(e)
                            }), m.setPrice(l), m.setText("TP: ".concat(l)), m.setLineStyle(2), m.setLineColor("green"), m.setQuantity((0, tL.vv)(parseFloat(eq(l, o, i, r)))), m.onMove(async () => {
                                let e = m.getPrice(),
                                    t = "buy" === r && (e < s || e < o) || "sell" === r && (e > s || e > o),
                                    c = !b(e);
                                if (t || c) return void m.setPrice(u);
                                l = e, u = e, m.setText("TP: ".concat(e));
                                let d = eq(e, o, i, r);
                                m.setQuantity((0, tL.vv)(parseFloat(d))), await (0, e5.G)(n, {
                                    takeProfit: e
                                }), P.current = P.current.map(t => t.id === n ? {
                                    ...t,
                                    takeProfit: e
                                } : t), a(t => t.map(t => t.id === n ? {
                                    ...t,
                                    takeProfit: e
                                } : t)), eD(), m.setPrice(e)
                            }), (null == (t = e.partials) ? void 0 : t.length) && e.partials.forEach((t, r) => {
                                if ("cancelled" === t.status) return;
                                let o = h.createOrderLine();
                                o.setPrice(t.price), o.setText("Partial:".concat(t.price)), o.setQuantity("".concat((t.amount / i * 100).toFixed(2), "%")), o.setLineStyle(1), o.setLineColor("orange");
                                let s = {
                                    line: o,
                                    lastValid: t.price,
                                    idx: r
                                };
                                f.push(s), o.onMove(async () => {
                                    let t = o.getPrice(),
                                        {
                                            min: r,
                                            max: i
                                        } = C();
                                    if (t < r || t > i) return void o.setPrice(s.lastValid);
                                    if (s.lastValid = t, o.setText("Partial:".concat(t)), e.partials) {
                                        let r = e.partials.map((e, r) => r === s.idx ? {
                                            ...e,
                                            price: t
                                        } : e);
                                        e.partials[s.idx].price = t, await (0, e5.G)(n, {
                                            partials: r
                                        }), P.current = P.current.map(e => e.id === n ? {
                                            ...e,
                                            partials: r
                                        } : e), a(e => e.map(e => e.id === n ? {
                                            ...e,
                                            partials: r
                                        } : e)), eD()
                                    }
                                    o.setPrice(t)
                                }), o.onCancel(async () => {
                                    if (o.remove(), e.partials) {
                                        let t = e.partials.map((e, t) => t === s.idx ? {
                                            ...e,
                                            status: "cancelled"
                                        } : e);
                                        await (0, e5.G)(n, {
                                            partials: t
                                        }), P.current = P.current.map(e => e.id === n ? {
                                            ...e,
                                            partials: t
                                        } : e), a(e => e.map(e => e.id === n ? {
                                            ...e,
                                            partials: t
                                        } : e))
                                    }
                                    eD()
                                })
                            }), k(n, {
                                entryLine: p,
                                stopLossLine: g,
                                takeProfitLine: m,
                                partialLines: f.map(e => e.line)
                            })
                        }, eK = async e => {
                            var t;
                            if (!T.current) return;
                            let {
                                id: r,
                                tradeType: i,
                                quantity: n
                            } = e, o = e.entryPrice, s = e.stopLoss, l = e.takeProfit, c = s, d = l, u = () => {
                                var e, t;
                                return null != (t = null == (e = eN.getLatestMinuteBar()) ? void 0 : e.close) ? t : o
                            }, h = T.current.activeChart(), p = h.createOrderLine(), g = h.createOrderLine(), m = h.createOrderLine(), f = [], y = () => f.map(e => e.line.getPrice()), C = e => {
                                let t = y();
                                return !t.length || ("buy" === i ? e >= Math.max(...t) : e <= Math.min(...t))
                            }, b = e => {
                                let t = y();
                                return !t.length || ("buy" === i ? e <= Math.min(...t) : e >= Math.max(...t))
                            }, S = () => {
                                let e = g.getPrice(),
                                    t = m.getPrice();
                                return "buy" === i ? {
                                    min: e,
                                    max: t
                                } : {
                                    min: t,
                                    max: e
                                }
                            };
                            p.setPrice(o), p.setText("Entry: ".concat(o)), p.setLineStyle(0), p.setQuantity((0, tL.vv)(0)), p.onCancel(() => {
                                ea(e), q(!0)
                            }), g.setPrice(s), g.setText("SL: ".concat(s)), g.setLineStyle(2), g.setLineColor("red"), g.setQuantity((0, tL.vv)(parseFloat(eq(s, o, n, i)))), g.onMove(async () => {
                                let e = g.getPrice(),
                                    t = u(),
                                    d = "sell" === i && (e < l || e < t) || "buy" === i && (e > l || e > t),
                                    h = !b(e);
                                if (d || h) return void g.setPrice(c);
                                s = e, c = e, g.setText("SL: ".concat(e)), g.setQuantity((0, tL.vv)(parseFloat(eq(e, o, n, i)))), await (0, e5.G)(r, {
                                    stopLoss: e
                                }), P.current = P.current.map(t => t.id === r ? {
                                    ...t,
                                    stopLoss: e
                                } : t), a(t => t.map(t => t.id === r ? {
                                    ...t,
                                    stopLoss: e
                                } : t)), eD(), g.setPrice(e)
                            }), m.setPrice(l), m.setText("TP: ".concat(l)), m.setLineStyle(2), m.setLineColor("green"), m.setQuantity((0, tL.vv)(parseFloat(eq(l, o, n, i)))), m.onMove(async () => {
                                let e = m.getPrice(),
                                    t = u(),
                                    c = "buy" === i && (e < s || e < t) || "sell" === i && (e > s || e > t),
                                    h = !C(e);
                                if (c || h) return void m.setPrice(d);
                                l = e, d = e, m.setText("TP: ".concat(e)), m.setQuantity((0, tL.vv)(parseFloat(eq(e, o, n, i)))), await (0, e5.G)(r, {
                                    takeProfit: e
                                }), P.current = P.current.map(t => t.id === r ? {
                                    ...t,
                                    takeProfit: e
                                } : t), a(t => t.map(t => t.id === r ? {
                                    ...t,
                                    takeProfit: e
                                } : t)), eD(), m.setPrice(e)
                            }), (null == (t = e.partials) ? void 0 : t.length) && e.partials.forEach((t, i) => {
                                if ("cancelled" === t.status) return;
                                let o = h.createOrderLine();
                                o.setPrice(t.price), o.setText("Partial:".concat(t.price)), o.setQuantity("".concat((t.amount / n * 100).toFixed(2), "%"));
                                let s = "open" === t.status;
                                o.setLineStyle(+!s), o.setLineColor("orange");
                                let l = {
                                    line: o,
                                    lastValid: t.price,
                                    idx: i,
                                    status: t.status
                                };
                                f.push(l), s || (o.onMove(async () => {
                                    let t = o.getPrice(),
                                        {
                                            min: i,
                                            max: n
                                        } = S();
                                    if (t < i || t > n) return void o.setPrice(l.lastValid);
                                    l.lastValid = t, o.setText("Partial:".concat(t));
                                    let s = e.partials.map((e, r) => r === l.idx ? {
                                        ...e,
                                        price: t
                                    } : e);
                                    e.partials[l.idx].price = t, await (0, e5.G)(r, {
                                        partials: s
                                    }), P.current = P.current.map(e => e.id === r ? {
                                        ...e,
                                        partials: s
                                    } : e), a(e => e.map(e => e.id === r ? {
                                        ...e,
                                        partials: s
                                    } : e)), eD(), o.setPrice(t)
                                }), o.onCancel(async () => {
                                    if (o.remove(), e.partials) {
                                        let t = e.partials.map((e, t) => t === l.idx ? {
                                            ...e,
                                            status: "cancelled"
                                        } : e);
                                        await (0, e5.G)(r, {
                                            partials: t
                                        }), P.current = P.current.map(e => e.id === r ? {
                                            ...e,
                                            partials: t
                                        } : e), a(e => e.map(e => e.id === r ? {
                                            ...e,
                                            partials: t
                                        } : e))
                                    }
                                    eD()
                                }))
                            }), k(r, {
                                entryLine: p,
                                stopLossLine: g,
                                takeProfitLine: m,
                                partialLines: f.map(e => e.line)
                            })
                        }, eQ = () => {
                            T.current && P.current.forEach(e => {
                                "open" === e.status ? eK(e) : "pending" === e.status && eZ(e)
                            })
                        }, eX = (0, eI.useRef)(new Set), e3 = async e => {
                            let {
                                high: t,
                                low: r,
                                time: i
                            } = e;
                            P.current.forEach(async e => {
                                if ("pending" !== e.status) return;
                                let n = e.entryPrice;
                                if (!(n >= r && n <= t) || eX.current.has(e.id)) return;
                                eX.current.add(e.id), I(e.id);
                                let o = new Date(i),
                                    s = null,
                                    l = e.stopLoss,
                                    c = e.takeProfit;
                                if ("buy" === e.tradeType ? r <= l ? s = l : t >= c && (s = c) : t >= l ? s = l : r <= c && (s = c), null !== s) {
                                    let t = new Date(i),
                                        r = eN.getMaxDrawdown(e.pair, o, t, e.tradeType),
                                        n = eN.getMaxPotentialProfit(e.pair, o, t, e.tradeType, e.entryPrice, e.stopLoss),
                                        l = null == r ? null : parseFloat(eJ(r, e.entryPrice, e.quantity, e.tradeType, [])),
                                        c = null == n ? null : parseFloat(eJ(n, e.entryPrice, e.quantity, e.tradeType, [])),
                                        d = {
                                            status: "closed",
                                            startDate: o,
                                            endDate: t,
                                            profitLoss: parseFloat(eJ(s, e.entryPrice, e.quantity, e.tradeType, [])),
                                            maxDrawdown: l,
                                            maxPotentialProfit: c
                                        };
                                    await (0, e5.G)(e.id, d);
                                    let u = P.current.map(t => t.id === e.id ? {
                                        ...t,
                                        ...d
                                    } : t);
                                    P.current = u, a(u), eD(u);
                                    return
                                }
                                let d = {
                                    ...e,
                                    status: "open",
                                    startDate: o
                                };
                                P.current = P.current.map(t => t.id === e.id ? d : t), a(t => t.map(t => t.id === e.id ? d : t)), eK(d), await (0, e5.G)(e.id, {
                                    status: "open",
                                    startDate: o
                                }), eD()
                            })
                        }, e6 = async e => {
                            let t = !1;
                            P.current.forEach(r => {
                                if ("open" === r.status) {
                                    let i = v.current[r.id];
                                    if (!i) return;
                                    let {
                                        entryLine: n
                                    } = i;
                                    if (!n) return;
                                    let o = eJ(e.close, r.entryPrice, r.quantity, r.tradeType, r.partials || []);
                                    n.setQuantity((0, tL.vv)(parseFloat(o)));
                                    let s = parseFloat(o);
                                    a(e => e.map(e => e.id === r.id ? {
                                        ...e,
                                        profitLoss: s
                                    } : e)), !t && d + s < 0 && (t = !0)
                                }
                            }), t && await e9(e)
                        }, e9 = async e => {
                            let t = [],
                                r = P.current.map(r => {
                                    if ("open" !== r.status) return r;
                                    I(r.id);
                                    let i = parseFloat(eJ(e.close, r.entryPrice, r.quantity, r.tradeType, r.partials || [])),
                                        a = new Date(e.time),
                                        n = eN.getMaxDrawdown(r.pair, r.startDate, a, r.tradeType),
                                        o = eN.getMaxPotentialProfit(r.pair, r.startDate, a, r.tradeType, r.entryPrice, r.stopLoss),
                                        s = {
                                            status: "closed",
                                            endDate: a,
                                            profitLoss: i,
                                            maxDrawdown: null == n ? null : parseFloat(eJ(n, r.entryPrice, r.quantity, r.tradeType, [])),
                                            maxPotentialProfit: null == o ? null : parseFloat(eJ(o, r.entryPrice, r.quantity, r.tradeType, []))
                                        };
                                    return t.push((0, e5.G)(r.id, s)), {
                                        ...r,
                                        ...s
                                    }
                                });
                            await Promise.all(t), P.current = r, a(r), eD(r)
                        }, e7 = async e => {
                            let t = e.high,
                                r = e.low;
                            P.current.forEach(async i => {
                                if ("open" === i.status) {
                                    let n = v.current[i.id];
                                    if (!n) return;
                                    let {
                                        stopLossLine: o,
                                        takeProfitLine: s
                                    } = n, l = null == o ? void 0 : o.getPrice(), c = null == s ? void 0 : s.getPrice(), d = null;
                                    if (void 0 !== l && ("buy" === i.tradeType && r <= l || "sell" === i.tradeType && t >= l) ? d = l : void 0 !== c && ("buy" === i.tradeType && t >= c || "sell" === i.tradeType && r <= c) && (d = c), null !== d) {
                                        I(i.id);
                                        let t = parseFloat(eJ(d, i.entryPrice, i.quantity, i.tradeType, i.partials || [])),
                                            r = new Date(e.time),
                                            n = eN.getMaxDrawdown(i.pair, i.startDate, r, i.tradeType),
                                            o = null == n ? null : parseFloat(eJ(n, i.entryPrice, i.quantity, i.tradeType, [])),
                                            s = eN.getMaxPotentialProfit(i.pair, i.startDate, r, i.tradeType, i.entryPrice, i.stopLoss),
                                            l = {
                                                status: "closed",
                                                endDate: r,
                                                profitLoss: t,
                                                maxDrawdown: o,
                                                maxPotentialProfit: null == s ? null : parseFloat(eJ(s, i.entryPrice, i.quantity, i.tradeType, []))
                                            };
                                        await (0, e5.G)(i.id, l);
                                        let c = P.current.map(e => e.id === i.id ? {
                                            ...e,
                                            ...l
                                        } : e);
                                        P.current = c, a(c), eD(c)
                                    }
                                }
                            })
                        }, te = async e => {
                            let t = e.high,
                                r = e.low;
                            P.current.forEach(e => {
                                var i;
                                if ("open" !== e.status || !(null == (i = e.partials) ? void 0 : i.length)) return;
                                let n = v.current[e.id];
                                n && e.partials.forEach(async (i, o) => {
                                    if ("pending" === i.status && ("buy" === e.tradeType ? t >= i.price : r <= i.price)) {
                                        let t = n.partialLines[o];
                                        null == t || t.setLineStyle(0);
                                        let r = e.partials.map((e, t) => t === o ? {
                                            ...e,
                                            status: "closed"
                                        } : e);
                                        await (0, e5.G)(e.id, {
                                            partials: r
                                        });
                                        let i = P.current.map(t => t.id === e.id ? {
                                            ...t,
                                            partials: r
                                        } : t);
                                        P.current = i, a(i), eD(i)
                                    }
                                })
                            })
                        }, tt = async (e, t, r) => {
                            var i;
                            let n = P.current.find(t => t.id === e);
                            if (!n) return;
                            let o = n.quantity,
                                s = r ? t / 100 * o : t,
                                l = (n.partials || []).reduce((e, t) => "open" === t.status || "closed" === t.status ? e + t.amount : e, 0) + s,
                                c = eN.getLatestMinuteBar(),
                                d = null != (i = null == c ? void 0 : c.close) ? i : n.entryPrice,
                                u = c ? new Date(c.time) : new Date;
                            if (l >= o) {
                                I(e);
                                let t = parseFloat(eJ(d, n.entryPrice, n.quantity, n.tradeType, [...n.partials || [], {
                                        amount: s,
                                        price: d,
                                        status: "closed"
                                    }])),
                                    r = eN.getMaxDrawdown(n.pair, n.startDate, u, n.tradeType),
                                    i = null == r ? null : parseFloat(eJ(r, n.entryPrice, n.quantity, n.tradeType, [])),
                                    o = eN.getMaxPotentialProfit(n.pair, n.startDate, u, n.tradeType, n.entryPrice, n.stopLoss),
                                    l = {
                                        status: "closed",
                                        endDate: u,
                                        profitLoss: t,
                                        maxDrawdown: i,
                                        maxPotentialProfit: null == o ? null : parseFloat(eJ(o, n.entryPrice, n.quantity, n.tradeType, []))
                                    };
                                await (0, e5.G)(e, l);
                                let c = P.current.map(t => t.id === e ? {
                                    ...t,
                                    ...l
                                } : t);
                                P.current = c, a(c), eD(c)
                            } else {
                                let t = [...n.partials || [], {
                                    amount: s,
                                    price: d,
                                    status: "closed"
                                }];
                                N(n, d, s), await (0, e5.G)(e, {
                                    partials: t
                                });
                                let r = P.current.map(r => r.id === e ? {
                                    ...r,
                                    partials: t
                                } : r);
                                P.current = r, a(r), eD(r)
                            }
                        }, tr = async e => {
                            let t = "number" == typeof e.time ? e.time : new Date(e.time).getTime();
                            if (null != L.current) {
                                let e = Math.max(0, t - L.current);
                                _.current += e
                            }
                            L.current = t;
                            let r = _.current >= 108e5,
                                i = x.current >= 10;
                            return !!r && !!i && (ez(), _.current = 0, x.current = 0, !0)
                        }, ti = async e => {
                            h(new Date(e.time).toISOString().slice(0, 10)), await e3(e), await e6(e), await e7(e), await te(e), await tr(e)
                        };
                    return (0, eI.useEffect)(() => {
                        eN.setOnNewBarCallback(ti);
                        let e = new eF({
                            symbol: t.pairs[0],
                            theme: C,
                            timezone: p || "Etc/UTC",
                            datafeed: eN,
                            interval: "15",
                            container: S.current,
                            library_path: "/static/charting_library/",
                            locale: function() {
                                let e = RegExp("[\\?&]lang=([^&#]*)").exec(window.location.search);
                                return null === e ? null : decodeURIComponent(e[1].replace(/\+/g, " "))
                            }() || "en",
                            disabled_features: ["go_to_date", "header_compare", "symbol_search_hot_key", "header_fullscreen_button"],
                            enabled_features: ["study_templates", "timezone_menu", "custom_resolutions"],
                            favorites: {
                                drawingTools: ["LineToolRiskRewardLong", "LineToolRiskRewardShort", "LineToolTrendLine", "LineToolRectangle"]
                            },
                            time_frames: [],
                            save_load_adapter: tZ,
                            user_id: t.userId,
                            fullscreen: !1,
                            autosize: !0,
                            auto_save_delay: 5,
                            custom_formatters: {
                                dateFormatter: {
                                    format: function(e) {
                                        return ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"][e.getUTCDay()] + " " + (e.getUTCDate() + " " + e.toLocaleString("default", {
                                            month: "short"
                                        }) + " '") + e.getUTCFullYear().toString().substr(-2)
                                    },
                                    formatLocal: function(e) {
                                        return e.toLocaleString()
                                    },
                                    parse: function(e) {
                                        return new Date(e).toISOString()
                                    }
                                }
                            },
                            custom_indicators_getter: function(e) {
                                let t = [];
                                
                                return "pro" === e.subscriptionType ? t.push(function(e) {
                                        var t, r, i, a;
                                        let n = null != (t = e.sessionPrefs) ? t : {
                                                London: {
                                                    startTime: "08:00",
                                                    endTime: "14:00"
                                                },
                                                NewYork: {
                                                    startTime: "14:00",
                                                    endTime: "20:00"
                                                },
                                                Tokyo: {
                                                    startTime: "00:00",
                                                    endTime: "08:00"
                                                }
                                            },
                                            o = e => {
                                                let [t, r] = (null != e ? e : "00:00").split(":").map(Number), i = new Date;
                                                i.setHours(t, r, 0, 0);
                                                let a = String(i.getUTCHours()).padStart(2, "0"),
                                                    n = String(i.getUTCMinutes()).padStart(2, "0");
                                                return "".concat(a).concat(n)
                                            },
                                            s = null != (r = n.London) ? r : {
                                                startTime: "08:00",
                                                endTime: "14:00"
                                            },
                                            l = null != (i = n.NewYork) ? i : {
                                                startTime: "14:00",
                                                endTime: "20:00"
                                            },
                                            c = null != (a = n.Tokyo) ? a : {
                                                startTime: "00:00",
                                                endTime: "08:00"
                                            },
                                            d = "".concat(o(s.startTime), "-").concat(o(s.endTime)),
                                            u = "".concat(o(l.startTime), "-").concat(o(l.endTime)),
                                            h = "".concat(o(c.startTime), "-").concat(o(c.endTime));
                                        return async function(e) {
                                            return [{
                                                name: "Session Indicator by Traders Casa",
                                                metainfo: {
                                                    _metainfoVersion: 53,
                                                    id: "SessionIndicator@tv-basicstudies-1",
                                                    description: "Session Indicator by Traders Casa",
                                                    shortDescription: "Sessions (Enhanced)",
                                                    is_price_study: !0,
                                                    linkedToSeries: !0,
                                                    format: {
                                                        type: "inherit"
                                                    },
                                                    plots: [{
                                                        id: "londonBg",
                                                        palette: "palette_l",
                                                        type: "bg_colorer"
                                                    }, {
                                                        id: "nyBg",
                                                        palette: "palette_n",
                                                        type: "bg_colorer"
                                                    }, {
                                                        id: "asiaBg",
                                                        palette: "palette_a",
                                                        type: "bg_colorer"
                                                    }],
                                                    defaults: {
                                                        styles: {
                                                            londonBg: {
                                                                visible: !0,
                                                                palette: "palette_l",
                                                                title: "London Background",
                                                                transparency: 70
                                                            },
                                                            nyBg: {
                                                                visible: !0,
                                                                palette: "palette_n",
                                                                title: "NY Background",
                                                                transparency: 70
                                                            },
                                                            asiaBg: {
                                                                visible: !0,
                                                                palette: "palette_a",
                                                                title: "Asia Background",
                                                                transparency: 75
                                                            }
                                                        },
                                                        palettes: {
                                                            palette_l: {
                                                                colors: {
                                                                    0: {
                                                                        color: "#2DA9A3"
                                                                    }
                                                                }
                                                            },
                                                            palette_n: {
                                                                colors: {
                                                                    0: {
                                                                        color: "#FF6B81"
                                                                    }
                                                                }
                                                            },
                                                            palette_a: {
                                                                colors: {
                                                                    0: {
                                                                        color: "#FFC857"
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        inputs: {
                                                            londonSession: d,
                                                            nySession: u,
                                                            asiaSession: h,
                                                            showLondon: !0,
                                                            showNY: !0,
                                                            showAsia: !0
                                                        }
                                                    },
                                                    palettes: {
                                                        palette_l: {
                                                            colors: {
                                                                0: {
                                                                    name: "London"
                                                                }
                                                            },
                                                            valToIndex: {
                                                                London: 0
                                                            }
                                                        },
                                                        palette_n: {
                                                            colors: {
                                                                0: {
                                                                    name: "NY"
                                                                }
                                                            },
                                                            valToIndex: {
                                                                NY: 0
                                                            }
                                                        },
                                                        palette_a: {
                                                            colors: {
                                                                0: {
                                                                    name: "Asia"
                                                                }
                                                            },
                                                            valToIndex: {
                                                                Asia: 0
                                                            }
                                                        }
                                                    },
                                                    inputs: [{
                                                        id: "londonSession",
                                                        name: "London (UTC)",
                                                        defval: d,
                                                        type: "session"
                                                    }, {
                                                        id: "nySession",
                                                        name: "New York (UTC)",
                                                        defval: u,
                                                        type: "session"
                                                    }, {
                                                        id: "asiaSession",
                                                        name: "Asia (UTC)",
                                                        defval: h,
                                                        type: "session"
                                                    }, {
                                                        id: "showLondon",
                                                        name: "Show London",
                                                        defval: !0,
                                                        type: "bool"
                                                    }, {
                                                        id: "showNY",
                                                        name: "Show New York",
                                                        defval: !0,
                                                        type: "bool"
                                                    }, {
                                                        id: "showAsia",
                                                        name: "Show Asia",
                                                        defval: !0,
                                                        type: "bool"
                                                    }]
                                                },
                                                constructor: function() {
                                                    function e(e) {
                                                        if (!e || !e.includes("-")) return {
                                                            start: NaN,
                                                            end: NaN
                                                        };
                                                        let [r, i] = e.split("-");
                                                        return {
                                                            start: t(r),
                                                            end: t(i)
                                                        }
                                                    }

                                                    function t(e) {
                                                        return 3600 * (parseInt(e.slice(0, 2), 10) || 0) + 60 * (parseInt(e.slice(2, 4), 10) || 0)
                                                    }

                                                    function r(e, t) {
                                                        return !(Number.isNaN(e.start) || Number.isNaN(e.end)) && (e.start <= e.end ? t >= e.start && t <= e.end : t >= e.start || t <= e.end)
                                                    }
                                                    this.main = function(t, i) {
                                                        let a = i(0),
                                                            n = i(1),
                                                            o = i(2),
                                                            s = !!i(3),
                                                            l = !!i(4),
                                                            c = !!i(5),
                                                            d = t.symbol.time;
                                                        if (null == d || Number.isNaN(d)) return [null, null, null];
                                                        let u = new Date(d),
                                                            h = 3600 * u.getUTCHours() + 60 * u.getUTCMinutes() + u.getUTCSeconds(),
                                                            p = e(a),
                                                            g = e(n),
                                                            m = e(o),
                                                            f = s && r(p, h);
                                                        return [f ? 0 : null, l && r(g, h) ? 0 : null, c && r(m, h) ? 0 : null]
                                                    }
                                                }
                                            }]
                                        }
                                    }(e)) : t.push(async function(e) {
                                        return [{
                                            name: "Session Indicator by Traders Casa (PRO)",
                                            metainfo: {
                                                _metainfoVersion: 53,
                                                id: "SessionIndicatorPRO@tv-basicstudies-1",
                                                description: "Session Indicator by Traders Casa (PRO)",
                                                shortDescription: "Sessions (PRO)",
                                                is_price_study: !0,
                                                linkedToSeries: !0,
                                                format: {
                                                    type: "inherit"
                                                },
                                                plots: [],
                                                defaults: {},
                                                styles: {},
                                                inputs: []
                                            },
                                            constructor: function() {
                                                this.main = function() {
                                                    return []
                                                }
                                            }
                                        }]
                                    }),
                                    function(e) {
                                        return Promise.all(t.map(t => t(e))).then(e => e.flat())
                                    }
                            }({
                                subscriptionType: y,
                                sessionPrefs: m
                            })
                        });
                        return T.current = e, b({
                            showClosedTrade: j,
                            hideClosedTrade: R,
                            takeScreenshot: A
                        }), e.subscribe("onAutoSaveNeeded", () => {
                            e.saveChartToServer()
                        }), e.onChartReady(() => {
                            e.headerReady().then(() => {
                                let i = e.createButton();
                                i.setAttribute("title", "Open Position"), i.textContent = "Open Position";
                                let n = i.parentNode;
                                n && n.classList && n.classList.add("button-merBkM5y"), n.addEventListener("click", () => {
                                    eY(e), eG(), z(!0)
                                });
                                let o = e.createButton();
                                o.setAttribute("title", "Quick Place"), o.textContent = "Quick Place";
                                let s = o.parentNode;
                                s && s.classList && s.classList.add("button-merBkM5y"), s.addEventListener("click", async () => {
                                    let t = "basic" === y || "ad-free" === y;
                                    if ("free" === y) {
                                        X({
                                            primary: "Place Trades in One Click with Pro",
                                            secondary: "",
                                            gif: "quick-place"
                                        }), Q(!0);
                                        return
                                    }
                                    if (t) {
                                        if (ee.current >= 4) {
                                            X({
                                                primary: "Place Trades in One Click with Pro",
                                                secondary: "*Limited to 4 uses per session in Basic",
                                                gif: "quick-place"
                                            }), Q(!0);
                                            return
                                        }
                                        ee.current++
                                    }
                                    eY(e), eG(), Z(!0)
                                }), e.createDropdown({
                                    title: "Go To",
                                    tooltip: "Go To Specific Time",
                                    items: [{
                                        title: "London",
                                        onSelect: () => eH("london")
                                    }, {
                                        title: "New York",
                                        onSelect: () => eH("ny")
                                    }, {
                                        title: "Tokyo",
                                        onSelect: () => eH("tokyo")
                                    }, {
                                        title: "Custom Time",
                                        onSelect: () => eH("custom")
                                    }, {
                                        title: "Customise",
                                        onSelect: () => {
                                            if ("free" === y) {
                                                X({
                                                    primary: "Skip Ahead To Your Session With Pro",
                                                    secondary: "",
                                                    gif: "go-to"
                                                }), Q(!0);
                                                return
                                            }
                                            H(!0)
                                        }
                                    }]
                                });
                                let l = e.createButton();
                                l.setAttribute("title", "Rewind"), l.innerHTML = '<div data-role="button" class="button-reABrhVR" style="padding:0px!; display: inline-flex; align-items: center;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 28 28" width="28" height="28"><path fill="none" stroke="currentColor" d="M13.5 20V9l-6 5.5 6 5.5zM21.5 20V9l-6 5.5 6 5.5z"></path></svg><span>Rewind</span></div>';
                                let c = l.parentNode;
                                c && c.classList.add("button-merBkM5y"), c.addEventListener("click", async () => {
                                    let i = "basic" === y || "ad-free" === y;
                                    if ("free" === y) {
                                        X({
                                            primary: "Go Back to your Missed Entry with Pro",
                                            secondary: "",
                                            gif: "rewind"
                                        }), Q(!0);
                                        return
                                    }
                                    if (i) {
                                        if (er.current >= 4) {
                                            X({
                                                primary: "Go Back to your Missed Entry with Pro",
                                                secondary: "*Limited to 4 uses per session in Basic",
                                                gif: "rewind"
                                            }), Q(!0);
                                            return
                                        }
                                        er.current++
                                    }
                                    eG();
                                    let n = async () => {
                                        l.style.color = "blue";
                                        try {
                                            let i = await e.activeChart().requestSelectBar();
                                            if (!t.modifiedByUser && !await ex("Using rewind will mark your session as modified, would you like to continue?")) {
                                                l.style.color = "";
                                                return
                                            }
                                            if (new Date(1e3 * i) < new Date(t.backtestStartDate)) {
                                                await ex("You cannot rewind before your session start date (".concat(new Date(t.backtestStartDate).toLocaleDateString(), "), please select a different date."), !1), l.style.color = "";
                                                return
                                            }
                                            F(!0);
                                            let n = await eN.rewind(i);
                                            if (l.style.color = "", F(!1), n) {
                                                e.activeChart().resetData();
                                                let n = new Date(1e3 * i);
                                                await e4(t.id, n), a(e => e.filter(e => e.startDate && new Date(e.startDate) <= n)), t.backtestCurrentDate = n, h(n.toISOString().slice(0, 10)), _.current = 0, x.current = 0, L.current = null, t.modifiedByUser || (await e8(t.id), t.modifiedByUser = !0), r({
                                                    ...t
                                                }), await (0, e2.o)(t.id, t)
                                            } else tn.oR.error("Error rewinding session")
                                        } catch (e) {
                                            l.style.color = "", F(!1), tn.oR.error("Error rewinding session");
                                            return
                                        }
                                    };
                                    await n()
                                }), e.chart().onIntervalChanged().subscribe(null, async function(e) {
                                    eG(), W(!1);
                                    let t = "D" === e || "1D" === e ? 1440 : "W" === e || "1W" === e ? 10080 : "M" === e || "1M" === e ? 43200 : e.endsWith("H") ? 60 * parseInt(e) : parseInt(e);
                                    eo(t), eN.intervalChange(t)
                                }), eQ()
                            })
                        }), () => {
                            b({
                                showClosedTrade: async () => {},
                                hideClosedTrade: async () => {},
                                takeScreenshot: async () => null
                            }), e.remove()
                        }
                    }, []), (0, eI.useEffect)(() => {
                        let e = S.current;
                        if (!e) return;
                        let t = new Map,
                            r = e => {
                                try {
                                    let r = e.contentWindow;
                                    if (!r || t.has(r)) return;
                                    let i = e => {
                                        let t = e.target;
                                        if (t && ("INPUT" === t.tagName || "TEXTAREA" === t.tagName || t.isContentEditable)) return;
                                        let r = new KeyboardEvent("keydown", {
                                            key: e.key,
                                            code: e.code,
                                            altKey: e.altKey,
                                            ctrlKey: e.ctrlKey,
                                            metaKey: e.metaKey,
                                            shiftKey: e.shiftKey,
                                            bubbles: !0,
                                            cancelable: !0,
                                            repeat: e.repeat
                                        });
                                        window.dispatchEvent(r)
                                    };
                                    t.set(r, i), r.addEventListener("keydown", i)
                                } catch (e) {}
                            };
                        Array.from(e.querySelectorAll("iframe")).forEach(e => r(e));
                        let i = new MutationObserver(e => {
                            for (let t of e) t.addedNodes.forEach(e => {
                                e instanceof HTMLIFrameElement ? r(e) : e instanceof HTMLElement && e.querySelectorAll("iframe").forEach(e => r(e))
                            })
                        });
                        return i.observe(e, {
                            childList: !0,
                            subtree: !0
                        }), () => {
                            i.disconnect(), t.forEach((e, t) => {
                                try {
                                    t.removeEventListener("keydown", e)
                                } catch (e) {}
                            }), t.clear()
                        }
                    }, []), (0, ek.jsxs)(ek.Fragment, {
                        children: [E && (0, ek.jsxs)(ek.Fragment, {
                            children: [(0, ek.jsx)("div", {
                                className: "fixed top-0 left-0 w-screen h-2 z-[1000]",
                                children: (0, ek.jsx)(ej.A, {
                                    color: "hsl(var(--primary))",
                                    width: "100vw",
                                    height: 4,
                                    cssOverride: {
                                        width: "100vw",
                                        height: 4
                                    }
                                })
                            }), (0, ek.jsxs)("div", {
                                className: "fixed inset-0 z-[999] flex items-center justify-center bg-black bg-opacity-80 flex-col gap-4 transition-opacity duration-300",
                                style: {
                                    opacity: +!!E,
                                    pointerEvents: E ? "auto" : "none"
                                },
                                children: [(0, ek.jsx)(eR.A, {
                                    speedMultiplier: .8,
                                    color: "hsl(var(--primary))",
                                    className: ""
                                }), (0, ek.jsx)("span", {
                                    className: "text-white text-2xl font-light tracking-tight",
                                    children: "Rewinding..."
                                })]
                            })]
                        }), M && (0, ek.jsx)("div", {
                            className: "fixed top-0 left-0 w-screen h-2 z-[1000]",
                            children: (0, ek.jsx)(ej.A, {
                                color: "hsl(var(--primary))",
                                width: "100vw",
                                height: 4,
                                cssOverride: {
                                    width: "100vw",
                                    height: 4
                                }
                            })
                        }), (0, ek.jsx)("div", {
                            ref: S,
                            className: "w-full h-full"
                        }), (0, ek.jsx)(e0, {
                            barReplayStart: () => {
                                eN.bar_replay_start(), O(!0)
                            },
                            barReplayStop: eG,
                            barReplaySpeed: e => {
                                eN.bar_replay_speed(e)
                            },
                            barReplayStep: () => {
                                eN.bar_replay_step(), x.current += 1
                            },
                            barReplayStepSize: e => {
                                eN.bar_replay_step_size(e)
                            },
                            barReplaySync: e => {
                                eN.bar_replay_sync(e)
                            },
                            isPlaying: D,
                            setIsPlaying: O,
                            sync: B,
                            setSync: W,
                            chartInterval: en
                        }), (0, ek.jsx)(tw, {
                            open: U,
                            setOpen: z,
                            tradeData: ef,
                            setTradeData: ey,
                            tags: o,
                            setTags: s,
                            setNotes: c,
                            session: t,
                            setTrades: a,
                            currentBalance: d,
                            tradeFormRisk: eC,
                            setTradeFormRisk: eb,
                            createTradeLines: eZ,
                            createPositionLines: eK,
                            takeScreenshot: A
                        }), (0, ek.jsx)(tj, {
                            open: J,
                            setOpen: Z,
                            tradeData: ef,
                            setTrades: a,
                            session: t,
                            tradeFormRisk: eC,
                            createTradeLines: eZ,
                            createPositionLines: eK
                        }), (0, ek.jsx)(tx, {
                            open: G,
                            setOpen: H,
                            times: es,
                            setTimes: e => {
                                el(e), f(e)
                            }
                        }), (0, ek.jsx)(tI, {
                            open: Y,
                            setOpen: q,
                            closeTrade: tt,
                            trade: ei
                        }), (0, ek.jsx)(tY, {
                            open: eS,
                            onClose: eA
                        }), (0, ek.jsx)(tq, {
                            open: ev,
                            setOpen: ew
                        }), (0, ek.jsx)(tD, {
                            open: ec,
                            setOpen: ed,
                            message: eu,
                            onContinue: () => {
                                var e;
                                null == (e = em.current) || e.call(em, !0), em.current = void 0
                            },
                            onCancel: () => {
                                var e;
                                null == (e = em.current) || e.call(em, !1), em.current = void 0
                            },
                            showCancel: ep,
                            continueLabel: ep ? "Continue" : "OK"
                        }), (0, ek.jsx)(tJ.A, {
                            open: K,
                            setOpen: Q,
                            proModalText: $
                        })]
                    })
                }
        },
        25187: (e, t, r) => {
            r.d(t, {
                default: () => o
            });
            var i = r(22152);
            r(85060);
            var a = r(18107),
                n = r(78602);
            let o = e => {
                let {
                    title: t,
                    onClickEvent: r,
                    isLoading: o,
                    submitted: s,
                    className: l,
                    titleClassName: c,
                    disabled: d = !1,
                    type: u
                } = e;
                return (0, i.jsxs)("button", {
                    onClick: r,
                    disabled: o || d,
                    type: u,
                    className: (0, n.cn)("p-2 px-4 text-md sm:px-12 sm:text-lg shadow-lg border border-white/20 backdrop-blur-[20px] rounded-sm bg-gradient-button-main from-[#2a84c999] to-[#2ff9e8af] text-white hover:shadow-md transition duration-200 relative flex items-center justify-center disabled:cursor-not-allowed disabled:opacity-80", "".concat(l)),
                    children: [(0, i.jsx)("span", {
                        className: "".concat(c, " ").concat(o ? "opacity-0" : "opacity-100"),
                        children: s ? "Success!" : t
                    }), o && (0, i.jsx)("div", {
                        className: "absolute inset-0 flex items-center justify-center",
                        children: (0, i.jsx)(a.A, {
                            color: "white",
                            size: 8
                        })
                    })]
                })
            }
        },
        32433: (e, t, r) => {
            r.d(t, {
                bq: () => h,
                eb: () => f,
                gC: () => m,
                l6: () => d,
                yv: () => u
            });
            var i = r(22152),
                a = r(85060),
                n = r(5539),
                o = r(22126),
                s = r(68339),
                l = r(50312),
                c = r(78602);
            let d = n.bL;
            n.YJ;
            let u = n.WT,
                h = a.forwardRef((e, t) => {
                    let {
                        className: r,
                        children: a,
                        ...s
                    } = e;
                    return (0, i.jsxs)(n.l9, {
                        ref: t,
                        className: (0, c.cn)("flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1", r),
                        ...s,
                        children: [a, (0, i.jsx)(n.In, {
                            asChild: !0,
                            children: (0, i.jsx)(o.A, {
                                className: "h-4 w-4 opacity-50"
                            })
                        })]
                    })
                });
            h.displayName = n.l9.displayName;
            let p = a.forwardRef((e, t) => {
                let {
                    className: r,
                    ...a
                } = e;
                return (0, i.jsx)(n.PP, {
                    ref: t,
                    className: (0, c.cn)("flex cursor-default items-center justify-center py-1", r),
                    ...a,
                    children: (0, i.jsx)(s.A, {
                        className: "h-4 w-4"
                    })
                })
            });
            p.displayName = n.PP.displayName;
            let g = a.forwardRef((e, t) => {
                let {
                    className: r,
                    ...a
                } = e;
                return (0, i.jsx)(n.wn, {
                    ref: t,
                    className: (0, c.cn)("flex cursor-default items-center justify-center py-1", r),
                    ...a,
                    children: (0, i.jsx)(o.A, {
                        className: "h-4 w-4"
                    })
                })
            });
            g.displayName = n.wn.displayName;
            let m = a.forwardRef((e, t) => {
                let {
                    className: r,
                    children: a,
                    position: o = "popper",
                    ...s
                } = e;
                return (0, i.jsx)(n.ZL, {
                    children: (0, i.jsxs)(n.UC, {
                        ref: t,
                        className: (0, c.cn)("relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover/40 backdrop-blur-md text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2", "popper" === o && "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1", r),
                        position: o,
                        ...s,
                        children: [(0, i.jsx)(p, {}), (0, i.jsx)(n.LM, {
                            className: (0, c.cn)("p-1", "popper" === o && "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"),
                            children: a
                        }), (0, i.jsx)(g, {})]
                    })
                })
            });
            m.displayName = n.UC.displayName, a.forwardRef((e, t) => {
                let {
                    className: r,
                    ...a
                } = e;
                return (0, i.jsx)(n.JU, {
                    ref: t,
                    className: (0, c.cn)("px-2 py-1.5 text-sm font-semibold", r),
                    ...a
                })
            }).displayName = n.JU.displayName;
            let f = a.forwardRef((e, t) => {
                let {
                    className: r,
                    children: a,
                    ...o
                } = e;
                return (0, i.jsxs)(n.q7, {
                    ref: t,
                    className: (0, c.cn)("relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent/50 focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50", r),
                    ...o,
                    children: [(0, i.jsx)("span", {
                        className: "absolute right-2 flex h-3.5 w-3.5 items-center justify-center",
                        children: (0, i.jsx)(n.VF, {
                            children: (0, i.jsx)(l.A, {
                                className: "h-4 w-4"
                            })
                        })
                    }), (0, i.jsx)(n.p4, {
                        children: a
                    })]
                })
            });
            f.displayName = n.q7.displayName, a.forwardRef((e, t) => {
                let {
                    className: r,
                    ...a
                } = e;
                return (0, i.jsx)(n.wv, {
                    ref: t,
                    className: (0, c.cn)("-mx-1 my-1 h-px bg-muted", r),
                    ...a
                })
            }).displayName = n.wv.displayName
        },
        53357: (e, t, r) => {
            r.d(t, {
                d: () => s
            });
            var i = r(22152),
                a = r(85060),
                n = r(98616),
                o = r(78602);
            let s = a.forwardRef((e, t) => {
                let {
                    className: r,
                    ...a
                } = e;
                return (0, i.jsx)(n.bL, {
                    className: (0, o.cn)("peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input", r),
                    ...a,
                    ref: t,
                    children: (0, i.jsx)(n.zi, {
                        className: (0, o.cn)("pointer-events-none block h-4 w-4 rounded-full bg-white shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0")
                    })
                })
            });
            s.displayName = n.bL.displayName
        },
        61451: (e, t, r) => {
            r.d(t, {
                f: () => a
            });
            var i = r(44161);
            let a = (0, i.createServerReference)("7f02b21dadd59d0892605328be775e3a0e7f104b98", i.callServer, void 0, i.findSourceMapURL, "createCheckoutSession")
        },
        89738: (e, t, r) => {
            r.d(t, {
                Separator: () => s
            });
            var i = r(22152),
                a = r(85060),
                n = r(73140),
                o = r(78602);
            let s = a.forwardRef((e, t) => {
                let {
                    className: r,
                    orientation: a = "horizontal",
                    decorative: s = !0,
                    title: l,
                    titleColor: c = "text-muted-foreground",
                    color: d = "bg-border",
                    ...u
                } = e;
                return (0, i.jsxs)("div", {
                    className: "relative flex items-center w-full",
                    children: [(0, i.jsx)("div", {
                        className: "flex-1",
                        children: (0, i.jsx)(n.b, {
                            ref: t,
                            decorative: s,
                            orientation: a,
                            className: (0, o.cn)("shrink-0", d, "horizontal" === a ? "h-[1px] w-full" : "h-full w-[1px]", r),
                            ...u
                        })
                    }), l && (0, i.jsx)("span", {
                        className: (0, o.cn)("px-2 text-[11px]", "bg-border" === d ? "text-muted-foreground" : c),
                        children: l
                    }), (0, i.jsx)("div", {
                        className: "flex-1",
                        children: (0, i.jsx)(n.b, {
                            ref: t,
                            decorative: s,
                            orientation: a,
                            className: (0, o.cn)("shrink-0", d, "horizontal" === a ? "h-[1px] w-full" : "h-full w-[1px]", r),
                            ...u
                        })
                    })]
                })
            });
            s.displayName = n.b.displayName
        }
    }
]);
